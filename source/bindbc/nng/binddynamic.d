//        Copyright DarkRiDDeR (Roman Barinov) 2020.
// Distributed under the Boost Software License, Version 1.0.
//       (See accompanying file LICENSE or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

module bindbc.nng.binddynamic;


version(BindNNG_Static) {}
else version = BindNNG_Dynamic;

version(BindNNG_Dynamic):

import bindbc.loader;
import bindbc.nng.types;



extern (C) @trusted @nogc nothrow {
    // nng.h:
    alias pnng_fini = void function();
    alias pnng_close = int function(nng_socket);
    alias pnng_socket_id = int function(nng_socket);
    alias pnng_closeall = void function();
    alias pnng_setopt = int function(nng_socket, const(char)* , const void *, size_t);
    alias pnng_setopt_bool = int function(nng_socket, const(char)* , bool);
    alias pnng_setopt_int = int function(nng_socket, const(char)* , int);
    alias pnng_setopt_ms = int function(nng_socket, const(char)* , nng_duration);
    alias pnng_setopt_size = int function(nng_socket, const(char)* , size_t);
    alias pnng_setopt_uint64 = int function(nng_socket, const(char)* , uint64_t);
    alias pnng_setopt_string = int function(nng_socket, const(char)* , const(char)* );
    alias pnng_setopt_ptr = int function(nng_socket, const(char)* , void *);
    alias pnng_getopt = int function(nng_socket, const(char)* , void *, size_t *);
    alias pnng_getopt_bool = int function(nng_socket, const(char)* , bool *);
    alias pnng_getopt_int = int function(nng_socket, const(char)* , int *);
    alias pnng_getopt_ms = int function(nng_socket, const(char)* , nng_duration *);
    alias pnng_getopt_size = int function(nng_socket, const(char)* , size_t *);
    alias pnng_getopt_uint64 = int function(nng_socket, const(char)* , uint64_t *);
    alias pnng_getopt_ptr = int function(nng_socket, const(char)* , void **);
    alias pnng_getopt_string = int function(nng_socket, const(char)* , char **);
    alias pnng_socket_set = int function(nng_socket, const(char)* , const void *, size_t);
    alias pnng_socket_set_bool = int function(nng_socket, const(char)* , bool);
    alias pnng_socket_set_int = int function(nng_socket, const(char)* , int);
    alias pnng_socket_set_size = int function(nng_socket, const(char)* , size_t);
    alias pnng_socket_set_uint64 = int function(nng_socket, const(char)* , uint64_t);
    alias pnng_socket_set_string = int function(nng_socket, const(char)* , const(char)* );
    alias pnng_socket_set_ptr = int function(nng_socket, const(char)* , void *);
    alias pnng_socket_set_ms = int function(nng_socket, const(char)* , nng_duration);
    alias pnng_socket_set_addr = int function(nng_socket, const(char)* , const nng_sockaddr *);
    alias pnng_socket_get = int function(nng_socket, const(char)* , void *, size_t *);
    alias pnng_socket_get_bool = int function(nng_socket, const(char)* , bool *);
    alias pnng_socket_get_int = int function(nng_socket, const(char)* , int *);
    alias pnng_socket_get_size = int function(nng_socket, const(char)* , size_t *);
    alias pnng_socket_get_uint64 = int function(nng_socket, const(char)* , uint64_t *);
    alias pnng_socket_get_string = int function(nng_socket, const(char)* , char **);
    alias pnng_socket_get_ptr = int function(nng_socket, const(char)* , void **);
    alias pnng_socket_get_ms = int function(nng_socket, const(char)* , nng_duration *);
    alias pnng_socket_get_addr = int function(nng_socket, const(char)* , nng_sockaddr *);
    alias pnng_pipe_notify = int function(nng_socket, nng_pipe_ev, nng_pipe_cb, void *);
    alias pnng_listen = int function(nng_socket, const(char)* , nng_listener *, int);
    alias pnng_dial = int function(nng_socket, const(char)* , nng_dialer *, int);
    alias pnng_dialer_create = int function(nng_dialer *, nng_socket, const(char)* );
    alias pnng_listener_create = int function(nng_listener *, nng_socket, const(char)* );
    alias pnng_dialer_start = int function(nng_dialer, int);
    alias pnng_listener_start = int function(nng_listener, int);
    alias pnng_dialer_close = int function(nng_dialer);
    alias pnng_listener_close = int function(nng_listener);
    alias pnng_dialer_id = int function(nng_dialer);
    alias pnng_listener_id = int function(nng_listener);
    alias pnng_dialer_setopt = int function(nng_dialer, const(char)* , const void *, size_t);
    alias pnng_dialer_setopt_bool = int function(nng_dialer, const(char)* , bool);
    alias pnng_dialer_setopt_int = int function(nng_dialer, const(char)* , int);
    alias pnng_dialer_setopt_ms = int function(nng_dialer, const(char)* , nng_duration);
    alias pnng_dialer_setopt_size = int function(nng_dialer, const(char)* , size_t);
    alias pnng_dialer_setopt_uint64 = int function(nng_dialer, const(char)* , uint64_t);
    alias pnng_dialer_setopt_ptr = int function(nng_dialer, const(char)* , void *);
    alias pnng_dialer_setopt_string = int function(nng_dialer, const(char)* , const(char)* );
    alias pnng_dialer_getopt = int function(nng_dialer, const(char)* , void *, size_t *);
    alias pnng_dialer_getopt_bool = int function(nng_dialer, const(char)* , bool *);
    alias pnng_dialer_getopt_int = int function(nng_dialer, const(char)* , int *);
    alias pnng_dialer_getopt_ms = int function(nng_dialer, const(char)* , nng_duration *);
    alias pnng_dialer_getopt_size = int function(nng_dialer, const(char)* , size_t *);
    alias pnng_dialer_getopt_sockaddr = int function(nng_dialer, const(char)* , nng_sockaddr *);
    alias pnng_dialer_getopt_uint64 = int function(nng_dialer, const(char)* , uint64_t *);
    alias pnng_dialer_getopt_ptr = int function(nng_dialer, const(char)* , void **);
    alias pnng_dialer_getopt_string = int function(nng_dialer, const(char)* , char **);
    alias pnng_dialer_set = int function(nng_dialer, const(char)* , const void *, size_t);
    alias pnng_dialer_set_bool = int function(nng_dialer, const(char)* , bool);
    alias pnng_dialer_set_int = int function(nng_dialer, const(char)* , int);
    alias pnng_dialer_set_size = int function(nng_dialer, const(char)* , size_t);
    alias pnng_dialer_set_uint64 = int function(nng_dialer, const(char)* , uint64_t);
    alias pnng_dialer_set_string = int function(nng_dialer, const(char)* , const(char)* );
    alias pnng_dialer_set_ptr = int function(nng_dialer, const(char)* , void *);
    alias pnng_dialer_set_ms = int function(nng_dialer, const(char)* , nng_duration);
    alias pnng_dialer_set_addr = int function(nng_dialer, const(char)* , const nng_sockaddr *);
    alias pnng_dialer_get = int function(nng_dialer, const(char)* , void *, size_t *);
    alias pnng_dialer_get_bool = int function(nng_dialer, const(char)* , bool *);
    alias pnng_dialer_get_int = int function(nng_dialer, const(char)* , int *);
    alias pnng_dialer_get_size = int function(nng_dialer, const(char)* , size_t *);
    alias pnng_dialer_get_uint64 = int function(nng_dialer, const(char)* , uint64_t *);
    alias pnng_dialer_get_string = int function(nng_dialer, const(char)* , char **);
    alias pnng_dialer_get_ptr = int function(nng_dialer, const(char)* , void **);
    alias pnng_dialer_get_ms = int function(nng_dialer, const(char)* , nng_duration *);
    alias pnng_dialer_get_addr = int function(nng_dialer, const(char)* , nng_sockaddr *);
    alias pnng_listener_setopt = int function(nng_listener, const(char)* , const void *, size_t);
    alias pnng_listener_setopt_bool = int function(nng_listener, const(char)* , bool);
    alias pnng_listener_setopt_int = int function(nng_listener, const(char)* , int);
    alias pnng_listener_setopt_ms = int function(nng_listener, const(char)* , nng_duration);
    alias pnng_listener_setopt_size = int function(nng_listener, const(char)* , size_t);
    alias pnng_listener_setopt_uint64 = int function(nng_listener, const(char)* , uint64_t);
    alias pnng_listener_setopt_ptr = int function(nng_listener, const(char)* , void *);
    alias pnng_listener_setopt_string = int function(nng_listener, const(char)* , const(char)* );
    alias pnng_listener_getopt = int function(nng_listener, const(char)* , void *, size_t *);
    alias pnng_listener_getopt_bool = int function(nng_listener, const(char)* , bool *);
    alias pnng_listener_getopt_int = int function(nng_listener, const(char)* , int *);
    alias pnng_listener_getopt_ms = int function(nng_listener, const(char)* , nng_duration *);
    alias pnng_listener_getopt_size = int function(nng_listener, const(char)* , size_t *);
    alias pnng_listener_getopt_sockaddr = int function(nng_listener, const(char)* , nng_sockaddr *);
    alias pnng_listener_getopt_uint64 = int function(nng_listener, const(char)* , uint64_t *);
    alias pnng_listener_getopt_ptr = int function(nng_listener, const(char)* , void **);
    alias pnng_listener_getopt_string = int function(nng_listener, const(char)* , char **);
    alias pnng_listener_set = int function(nng_listener, const(char)* , const void *, size_t);
    alias pnng_listener_set_bool = int function(nng_listener, const(char)* , bool);
    alias pnng_listener_set_int = int function(nng_listener, const(char)* , int);
    alias pnng_listener_set_size = int function(nng_listener, const(char)* , size_t);
    alias pnng_listener_set_uint64 = int function(nng_listener, const(char)* , uint64_t);
    alias pnng_listener_set_string = int function(nng_listener, const(char)* , const(char)* );
    alias pnng_listener_set_ptr = int function(nng_listener, const(char)* , void *);
    alias pnng_listener_set_ms = int function(nng_listener, const(char)* , nng_duration);
    alias pnng_listener_set_addr = int function(nng_listener, const(char)* , const nng_sockaddr *);
    alias pnng_listener_get = int function(nng_listener, const(char)* , void *, size_t *);
    alias pnng_listener_get_bool = int function(nng_listener, const(char)* , bool *);
    alias pnng_listener_get_int = int function(nng_listener, const(char)* , int *);
    alias pnng_listener_get_size = int function(nng_listener, const(char)* , size_t *);
    alias pnng_listener_get_uint64 = int function(nng_listener, const(char)* , uint64_t *);
    alias pnng_listener_get_string = int function(nng_listener, const(char)* , char **);
    alias pnng_listener_get_ptr = int function(nng_listener, const(char)* , void **);
    alias pnng_listener_get_ms = int function(nng_listener, const(char)* , nng_duration *);
    alias pnng_listener_get_addr = int function(nng_listener, const(char)* , nng_sockaddr *);
    alias pnng_strerror = const(char)*  function(int);
    alias pnng_send = int function(nng_socket, void *, size_t, int);
    alias pnng_recv = int function(nng_socket, void *, size_t *, int);
    alias pnng_sendmsg = int function(nng_socket, nng_msg *, int);
    alias pnng_recvmsg = int function(nng_socket, nng_msg **, int);
    alias pnng_send_aio = void function(nng_socket, nng_aio *);
    alias pnng_recv_aio = void function(nng_socket, nng_aio *);
    alias pnng_ctx_open = int function(nng_ctx *, nng_socket);
    alias pnng_ctx_close = int function(nng_ctx);
    alias pnng_ctx_id = int function(nng_ctx);
    alias pnng_ctx_recv = void function(nng_ctx, nng_aio *);
    alias pnng_ctx_send = void function(nng_ctx, nng_aio *);
    alias pnng_ctx_getopt = int function(nng_ctx, const(char)* , void *, size_t *);
    alias pnng_ctx_getopt_bool = int function(nng_ctx, const(char)* , bool *);
    alias pnng_ctx_getopt_int = int function(nng_ctx, const(char)* , int *);
    alias pnng_ctx_getopt_ms = int function(nng_ctx, const(char)* , nng_duration *);
    alias pnng_ctx_getopt_size = int function(nng_ctx, const(char)* , size_t *);
    alias pnng_ctx_setopt = int function(nng_ctx, const(char)* , const void *, size_t);
    alias pnng_ctx_setopt_bool = int function(nng_ctx, const(char)* , bool);
    alias pnng_ctx_setopt_int = int function(nng_ctx, const(char)* , int);
    alias pnng_ctx_setopt_ms = int function(nng_ctx, const(char)* , nng_duration);
    alias pnng_ctx_setopt_size = int function(nng_ctx, const(char)* , size_t);
    alias pnng_ctx_get = int function(nng_ctx, const(char)* , void *, size_t *);
    alias pnng_ctx_get_bool = int function(nng_ctx, const(char)* , bool *);
    alias pnng_ctx_get_int = int function(nng_ctx, const(char)* , int *);
    alias pnng_ctx_get_size = int function(nng_ctx, const(char)* , size_t *);
    alias pnng_ctx_get_uint64 = int function(nng_ctx, const(char)* , uint64_t *);
    alias pnng_ctx_get_string = int function(nng_ctx, const(char)* , char **);
    alias pnng_ctx_get_ptr = int function(nng_ctx, const(char)* , void **);
    alias pnng_ctx_get_ms = int function(nng_ctx, const(char)* , nng_duration *);
    alias pnng_ctx_get_addr = int function(nng_ctx, const(char)* , nng_sockaddr *);
    alias pnng_ctx_set = int function(nng_ctx, const(char)* , const void *, size_t);
    alias pnng_ctx_set_bool = int function(nng_ctx, const(char)* , bool);
    alias pnng_ctx_set_int = int function(nng_ctx, const(char)* , int);
    alias pnng_ctx_set_size = int function(nng_ctx, const(char)* , size_t);
    alias pnng_ctx_set_uint64 = int function(nng_ctx, const(char)* , uint64_t);
    alias pnng_ctx_set_string = int function(nng_ctx, const(char)* , const(char)* );
    alias pnng_ctx_set_ptr = int function(nng_ctx, const(char)* , void *);
    alias pnng_ctx_set_ms = int function(nng_ctx, const(char)* , nng_duration);
    alias pnng_ctx_set_addr = int function(nng_ctx, const(char)* , const nng_sockaddr *);
    alias pnng_alloc = void * function(size_t);
    alias pnng_free = void function(void *, size_t);
    alias pnng_strdup = char * function(const(char)* );
    alias pnng_strfree = void function(char *);
    alias pnng_aio_alloc = int function(nng_aio **, void **, void *);
    alias pnng_aio_free = void function(nng_aio *);
    alias pnng_aio_stop = void function(nng_aio *);
    alias pnng_aio_result = int function(nng_aio *);
    alias pnng_aio_count = size_t function(nng_aio *);
    alias pnng_aio_cancel = void function(nng_aio *);
    alias pnng_aio_abort = void function(nng_aio *, int);
    alias pnng_aio_wait = void function(nng_aio *);
    alias pnng_aio_set_msg = void function(nng_aio *, nng_msg *);
    alias pnng_aio_get_msg = nng_msg * function(nng_aio *);
    alias pnng_aio_set_input = int function(nng_aio *, uint, void *);
    alias pnng_aio_get_input = void *function(nng_aio *, uint);
    alias pnng_aio_set_output = int function(nng_aio *, uint, void *);
    alias pnng_aio_get_output = void *function(nng_aio *, uint);
    alias pnng_aio_set_timeout = void function(nng_aio *, nng_duration);
    alias pnng_aio_set_iov = int function(nng_aio *, uint, const nng_iov *);
    alias pnng_aio_begin = bool function(nng_aio *);
    alias pnng_aio_finish = void function(nng_aio *, int);
    alias pnng_aio_defer = void function(nng_aio *, nng_aio_cancelfn, void *);
    alias pnng_sleep_aio = void function(nng_duration, nng_aio *);
    alias pnng_msg_alloc = int   function(nng_msg **, size_t);
    alias pnng_msg_free = void  function(nng_msg *);
    alias pnng_msg_realloc = int   function(nng_msg *, size_t);
    alias pnng_msg_header = void *function(nng_msg *);
    alias pnng_msg_header_len = size_t function(const nng_msg *);
    alias pnng_msg_body = void * function(nng_msg *);
    alias pnng_msg_len = size_t function(const nng_msg *);
    alias pnng_msg_append = int function(nng_msg *, const void *, size_t);
    alias pnng_msg_insert = int function(nng_msg *, const void *, size_t);
    alias pnng_msg_trim = int function(nng_msg *, size_t);
    alias pnng_msg_chop = int function(nng_msg *, size_t);
    alias pnng_msg_header_append  = int function(nng_msg *, const void *, size_t);
    alias pnng_msg_header_insert = int function(nng_msg *, const void *, size_t);
    alias pnng_msg_header_trim = int function(nng_msg *, size_t);
    alias pnng_msg_header_chop = int function(nng_msg *, size_t);
    alias pnng_msg_header_append_u16 = int function(nng_msg *, uint16_t);
    alias pnng_msg_header_append_u32 = int function(nng_msg *, uint32_t);
    alias pnng_msg_header_append_u64 = int function(nng_msg *, uint64_t);
    alias pnng_msg_header_insert_u16 = int function(nng_msg *, uint16_t);
    alias pnng_msg_header_insert_u32 = int function(nng_msg *, uint32_t);
    alias pnng_msg_header_insert_u64 = int function(nng_msg *, uint64_t);
    alias pnng_msg_header_chop_u16 = int function(nng_msg *, uint16_t *);
    alias pnng_msg_header_chop_u32 = int function(nng_msg *, uint32_t *);
    alias pnng_msg_header_chop_u64 = int function(nng_msg *, uint64_t *);
    alias pnng_msg_header_trim_u16 = int function(nng_msg *, uint16_t *);
    alias pnng_msg_header_trim_u32 = int function(nng_msg *, uint32_t *);
    alias pnng_msg_header_trim_u64 = int function(nng_msg *, uint64_t *);
    alias pnng_msg_append_u16 = int function(nng_msg *, uint16_t);
    alias pnng_msg_append_u32 = int function(nng_msg *, uint32_t);
    alias pnng_msg_append_u64 = int function(nng_msg *, uint64_t);
    alias pnng_msg_insert_u16 = int function(nng_msg *, uint16_t);
    alias pnng_msg_insert_u32 = int function(nng_msg *, uint32_t);
    alias pnng_msg_insert_u64 = int function(nng_msg *, uint64_t);
    alias pnng_msg_chop_u16 = int function(nng_msg *, uint16_t *);
    alias pnng_msg_chop_u32  = int function(nng_msg *, uint32_t *);
    alias pnng_msg_chop_u64 = int function(nng_msg *, uint64_t *);
    alias pnng_msg_trim_u16 = int function(nng_msg *, uint16_t *);
    alias pnng_msg_trim_u32 = int function(nng_msg *, uint32_t *);
    alias pnng_msg_trim_u64 = int function(nng_msg *, uint64_t *);
    alias pnng_msg_dup = int function(nng_msg **, const nng_msg *);
    alias pnng_msg_clear = void function(nng_msg *);
    alias pnng_msg_header_clear = void function(nng_msg *);
    alias pnng_msg_set_pipe = void function(nng_msg *, nng_pipe);
    alias pnng_msg_get_pipe = nng_pipe function(const nng_msg *);
    alias pnng_msg_getopt = int   function(nng_msg *, int, void *, size_t *);
    alias pnng_pipe_getopt = int function(nng_pipe, const(char)* , void *, size_t *);
    alias pnng_pipe_getopt_bool = int function(nng_pipe, const(char)* , bool *);
    alias pnng_pipe_getopt_int = int function(nng_pipe, const(char)* , int *);
    alias pnng_pipe_getopt_ms = int function(nng_pipe, const(char)* , nng_duration *);
    alias pnng_pipe_getopt_size = int function(nng_pipe, const(char)* , size_t *);
    alias pnng_pipe_getopt_sockaddr = int function(nng_pipe, const(char)* , nng_sockaddr *);
    alias pnng_pipe_getopt_uint64 = int function(nng_pipe, const(char)* , uint64_t *);
    alias pnng_pipe_getopt_ptr = int function(nng_pipe, const(char)* , void **);
    alias pnng_pipe_getopt_string = int function(nng_pipe, const(char)* , char **);
    alias pnng_pipe_get = int function(nng_pipe, const(char)* , void *, size_t *);
    alias pnng_pipe_get_bool = int function(nng_pipe, const(char)* , bool *);
    alias pnng_pipe_get_int = int function(nng_pipe, const(char)* , int *);
    alias pnng_pipe_get_ms = int function(nng_pipe, const(char)* , nng_duration *);
    alias pnng_pipe_get_size = int function(nng_pipe, const(char)* , size_t *);
    alias pnng_pipe_get_uint64 = int function(nng_pipe, const(char)* , uint64_t *);
    alias pnng_pipe_get_string = int function(nng_pipe, const(char)* , char **);
    alias pnng_pipe_get_ptr = int function(nng_pipe, const(char)* , void **);
    alias pnng_pipe_get_addr = int function(nng_pipe, const(char)* , nng_sockaddr *);
    alias pnng_pipe_close = int function(nng_pipe);
    alias pnng_pipe_id = int function(nng_pipe);
    alias pnng_pipe_socket = nng_socket function(nng_pipe);
    alias pnng_pipe_dialer = nng_dialer function(nng_pipe);
    alias pnng_pipe_listener = nng_listener function(nng_pipe);
    alias pnng_stats_get = int function(nng_stat **);
    alias pnng_stats_free = void function(nng_stat *);
    alias pnng_stats_dump = void function(nng_stat *);
    alias pnng_stat_next = nng_stat * function(nng_stat *);
    alias pnng_stat_child = nng_stat * function(nng_stat *);
    alias pnng_stat_name = const(char)*  function(nng_stat *);
    alias pnng_stat_type = int function(nng_stat *);
    alias pnng_stat_find = nng_stat *function(nng_stat *, const(char)* );
    alias pnng_stat_find_socket = nng_stat * function(nng_stat *, nng_socket);
    alias pnng_stat_find_dialer = nng_stat * function(nng_stat *, nng_dialer);
    alias pnng_stat_find_listener = nng_stat * function(nng_stat *, nng_listener);
    alias pnng_stat_unit = int function(nng_stat *);
    alias pnng_stat_value = uint64_t function(nng_stat *);
    alias pnng_stat_string = const(char)*  function(nng_stat *);
    alias pnng_stat_desc = const(char)*  function(nng_stat *);
    alias pnng_stat_timestamp = uint64_t function(nng_stat *);
    alias pnng_device = int function(nng_socket, nng_socket);
    alias pnng_url_parse = int function(nng_url **, const(char)* );
    alias pnng_url_free = void function(nng_url *);
    alias pnng_url_clone = int function(nng_url **, const nng_url *);
    alias pnng_version = const(char)*  function();
    alias pnng_stream_free = void function(nng_stream *);
    alias pnng_stream_close = void function(nng_stream *);
    alias pnng_stream_send = void function(nng_stream *, nng_aio *);
    alias pnng_stream_recv = void function(nng_stream *, nng_aio *);
    alias pnng_stream_get = int  function(nng_stream *, const(char)* , void *, size_t *);
    alias pnng_stream_get_bool = int  function(nng_stream *, const(char)* , bool *);
    alias pnng_stream_get_int = int  function(nng_stream *, const(char)* , int *);
    alias pnng_stream_get_ms = int  function(nng_stream *, const(char)* , nng_duration *);
    alias pnng_stream_get_size = int  function(nng_stream *, const(char)* , size_t *);
    alias pnng_stream_get_uint64 = int  function(nng_stream *, const(char)* , uint64_t *);
    alias pnng_stream_get_string = int  function(nng_stream *, const(char)* , char **);
    alias pnng_stream_get_ptr = int  function(nng_stream *, const(char)* , void **);
    alias pnng_stream_get_addr = int  function(nng_stream *, const(char)* , nng_sockaddr *);
    alias pnng_stream_set = int  function(nng_stream *, const(char)* , const void *, size_t);
    alias pnng_stream_set_bool = int  function(nng_stream *, const(char)* , bool);
    alias pnng_stream_set_int = int  function(nng_stream *, const(char)* , int);
    alias pnng_stream_set_ms = int  function(nng_stream *, const(char)* , nng_duration);
    alias pnng_stream_set_size = int  function(nng_stream *, const(char)* , size_t);
    alias pnng_stream_set_uint64 = int  function(nng_stream *, const(char)* , uint64_t);
    alias pnng_stream_set_string = int  function(nng_stream *, const(char)* , const(char)* );
    alias pnng_stream_set_ptr = int  function(nng_stream *, const(char)* , void *);
    alias pnng_stream_set_addr = int  function(nng_stream *, const(char)* , const nng_sockaddr *);
    alias pnng_stream_dialer_alloc = int function(nng_stream_dialer **, const(char)* );
    alias pnng_stream_dialer_alloc_url = int function(nng_stream_dialer **, const nng_url *);
    alias pnng_stream_dialer_free = void function(nng_stream_dialer *);
    alias pnng_stream_dialer_close = void function(nng_stream_dialer *);
    alias pnng_stream_dialer_dial = void function(nng_stream_dialer *, nng_aio *);
    alias pnng_stream_dialer_set = int  function(nng_stream_dialer *, const(char)* , const void *, size_t);
    alias pnng_stream_dialer_get = int function(nng_stream_dialer *, const(char)* , void *, size_t *);
    alias pnng_stream_dialer_get_bool = int function(nng_stream_dialer *, const(char)* , bool *);
    alias pnng_stream_dialer_get_int = int function(nng_stream_dialer *, const(char)* , int *);
    alias pnng_stream_dialer_get_ms = int function(nng_stream_dialer *, const(char)* , nng_duration *);
    alias pnng_stream_dialer_get_size = int function(nng_stream_dialer *, const(char)* , size_t *);
    alias pnng_stream_dialer_get_uint64 = int function(nng_stream_dialer *, const(char)* , uint64_t *);
    alias pnng_stream_dialer_get_string = int function(nng_stream_dialer *, const(char)* , char **);
    alias pnng_stream_dialer_get_ptr = int function(nng_stream_dialer *, const(char)* , void **);
    alias pnng_stream_dialer_get_addr = int function(nng_stream_dialer *, const(char)* , nng_sockaddr *);
    alias pnng_stream_dialer_set_bool = int function(nng_stream_dialer *, const(char)* , bool);
    alias pnng_stream_dialer_set_int = int function(nng_stream_dialer *, const(char)* , int);
    alias pnng_stream_dialer_set_ms = int function(nng_stream_dialer *, const(char)* , nng_duration);
    alias pnng_stream_dialer_set_size = int function(nng_stream_dialer *, const(char)* , size_t);
    alias pnng_stream_dialer_set_uint64 = int function(nng_stream_dialer *, const(char)* , uint64_t);
    alias pnng_stream_dialer_set_string = int function(nng_stream_dialer *, const(char)* , const(char)* );
    alias pnng_stream_dialer_set_ptr = int function(nng_stream_dialer *, const(char)* , void *);
    alias pnng_stream_dialer_set_addr = int function(nng_stream_dialer *, const(char)* , const nng_sockaddr *);
    alias pnng_stream_listener_alloc = int function(nng_stream_listener **, const(char)* );
    alias pnng_stream_listener_alloc_url = int function(nng_stream_listener **, const nng_url *);
    alias pnng_stream_listener_free = void function(nng_stream_listener *);
    alias pnng_stream_listener_close = void function(nng_stream_listener *);
    alias pnng_stream_listener_listen = int function(nng_stream_listener *);
    alias pnng_stream_listener_accept = void function(nng_stream_listener *, nng_aio *);
    alias pnng_stream_listener_set = int function(nng_stream_listener *, const(char)* , const void *, size_t);
    alias pnng_stream_listener_get = int function(nng_stream_listener *, const(char)* , void *, size_t *);
    alias pnng_stream_listener_get_bool = int function(nng_stream_listener *, const(char)* , bool *);
    alias pnng_stream_listener_get_int = int function(nng_stream_listener *, const(char)* , int *);
    alias pnng_stream_listener_get_ms = int function(nng_stream_listener *, const(char)* , nng_duration *);
    alias pnng_stream_listener_get_size = int function(nng_stream_listener *, const(char)* , size_t *);
    alias pnng_stream_listener_get_uint64 = int function(nng_stream_listener *, const(char)* , uint64_t *);
    alias pnng_stream_listener_get_string = int function(nng_stream_listener *, const(char)* , char **);
    alias pnng_stream_listener_get_ptr = int function(nng_stream_listener *, const(char)* , void **);
    alias pnng_stream_listener_get_addr = int function(nng_stream_listener *, const(char)* , nng_sockaddr *);
    alias pnng_stream_listener_set_bool = int function(nng_stream_listener *, const(char)* , bool);
    alias pnng_stream_listener_set_int = int function(nng_stream_listener *, const(char)* , int);
    alias pnng_stream_listener_set_ms = int function(nng_stream_listener *, const(char)* , nng_duration);
    alias pnng_stream_listener_set_size = int function(nng_stream_listener *, const(char)* , size_t);
    alias pnng_stream_listener_set_uint64 = int function(nng_stream_listener *, const(char)* , uint64_t);
    alias pnng_stream_listener_set_string = int function(nng_stream_listener *, const(char)* , const(char)* );
    alias pnng_stream_listener_set_ptr = int function(nng_stream_listener *, const(char)* , void *);
    alias pnng_stream_listener_set_addr = int function(nng_stream_listener *, const(char)* , const nng_sockaddr *);


    // compat/nanomsg/nn.h:
    alias pnn_cmsg_next = nn_cmsghdr * function(nn_msghdr *, nn_cmsghdr *);
    alias pnn_socket = int function(int, int);
    alias pnn_setsockopt = int function(int, int, int, const void *, size_t);
    alias pnn_getsockopt = int function(int, int, int, void *, size_t *);
    alias pnn_bind = int function(int, const(char)* );
    alias pnn_connect = int function(int, const(char)* );
    alias pnn_shutdown = int function(int, int);
    alias pnn_send = int function(int, const void *, size_t, int);
    alias pnn_recv = int function(int, void *, size_t, int);
    alias pnn_sendmsg = int function(int, const nn_msghdr *, int);
    alias pnn_recvmsg = int function(int, nn_msghdr *, int);
    alias pnn_close = int function(int);
    alias pnn_poll = int function(nn_pollfd *, int, int);
    alias pnn_device = int function(int, int);
    alias pnn_get_statistic = uint64_t function(int, int);
    alias pnn_allocmsg = void * function(size_t, int);
    alias pnn_reallocmsg = void * function(void *, size_t);
    alias pnn_freemsg = int function(void *);
    alias pnn_errno = int function();
    alias pnn_strerror = const(char)*  function(int);
    alias pnn_term = void function();


    // protocol/bus0/bus.h
    alias pnng_bus0_open = int function(nng_socket *);
    alias pnng_bus0_open_raw = int function(nng_socket *);
    alias pnng_bus_open = nng_bus0_open;
    alias pnng_bus_open_raw = nng_bus0_open_raw;


    // protocol/pair0/pair.h
    alias pnng_pair0_open = int function(nng_socket *);
    alias pnng_pair0_open_raw = int function(nng_socket *);
    //alias pnng_pair_open = nng_pair0_open;
    //alias pnng_pair_open_raw = nng_pair0_open_raw;


    // protocol/pair1/pair.h
    alias pnng_pair1_open = int function(nng_socket *);
    alias pnng_pair1_open_raw = int function(nng_socket *);
    //alias pnng_pair_open = nng_pair1_open;
    //alias pnng_pair_open_raw = nng_pair1_open_raw;

    // protocol/pipeline0/pull.h
    alias pnng_pull0_open = int function(nng_socket *);
    alias pnng_pull0_open_raw = int function(nng_socket *);
    alias pnng_pull_open = nng_pull0_open;
    alias pnng_pull_open_raw = nng_pull0_open_raw;

    // protocol/pipeline0/push.h
    alias pnng_push0_open = int function(nng_socket *);
    alias pnng_push0_open_raw = int function(nng_socket *);
    alias pnng_push_open = nng_push0_open;
    alias pnng_push_open_raw = nng_push0_open_raw;

    // protocol/pubsub0/pub.h
    alias pnng_pub0_open = int function(nng_socket *);
    alias pnng_pub0_open_raw = int function(nng_socket *);
    alias pnng_pub_open = nng_pub0_open;
    alias pnng_pub_open_raw = nng_pub0_open_raw;

    // protocol/pubsub0/sub.h
    alias pnng_sub0_open = int function(nng_socket *);
    alias pnng_sub0_open_raw = int function(nng_socket *);
    alias pnng_sub_open = nng_sub0_open;
    alias pnng_sub_open_raw = nng_sub0_open_raw;

    // protocol/reqrep0/rep.h
    alias pnng_rep0_open = int function(nng_socket *);
    alias pnng_rep0_open_raw = int function(nng_socket *);
    alias pnng_rep_open = nng_rep0_open;
    alias pnng_rep_open_raw = pnng_rep0_open_raw;

    // protocol/reqrep0/req.h
    alias pnng_req0_open = int function(nng_socket *);
    alias pnng_req0_open_raw = int function(nng_socket *);
    alias pnng_req_open = nng_req0_open;
    alias pnng_req_open_raw = pnng_req0_open_raw;

    // protocol/survey0/respond.h
    alias pnng_respondent0_open = int function(nng_socket *);
    alias pnng_respondent0_open_raw = int function(nng_socket *);
    alias pnng_respondent_open = nng_respondent0_open;
    alias pnng_respondent_open_raw = nng_respondent0_open_raw;

    // protocol/survey0/survey.h
    alias pnng_surveyor0_open = int function(nng_socket *);
    alias pnng_surveyor0_open_raw = int function(nng_socket *);
    alias pnng_surveyor_open = nng_surveyor0_open;
    alias pnng_surveyor_open_raw = nng_surveyor0_open_raw;

    // supplemental/http/http.h
    alias pnng_http_req_alloc = int function(nng_http_req **, const nng_url *);
    alias pnng_http_req_free = void function(nng_http_req *);
    alias pnng_http_req_get_method = const(char)*  function(nng_http_req *);
    alias pnng_http_req_get_version = const(char)*  function(nng_http_req *);
    alias pnng_http_req_get_uri = const(char)*  function(nng_http_req *);
    alias pnng_http_req_set_header = int function(nng_http_req *, const(char)* , const(char)* );
    alias pnng_http_req_add_header = int function(nng_http_req *, const(char)* , const(char)* );
    alias pnng_http_req_del_header = int function(nng_http_req *, const(char)* );
    alias pnng_http_req_get_header = const(char)*  function(nng_http_req *, const(char)* );
    alias pnng_http_req_set_method = int function(nng_http_req *, const(char)* );
    alias pnng_http_req_set_version = int function(nng_http_req *, const(char)* );
    alias pnng_http_req_set_uri = int function(nng_http_req *, const(char)* );
    alias pnng_http_req_set_data = int function(nng_http_req *, const void *, size_t);
    alias pnng_http_req_copy_data = int function(nng_http_req *, const void *, size_t);
    alias pnng_http_req_get_data = void function(nng_http_req *, void **, size_t *);
    alias pnng_http_res_alloc = int function(nng_http_res **);
    alias pnng_http_res_alloc_error = int function(nng_http_res **, uint16_t);
    alias pnng_http_res_free = void function(nng_http_res *);
    alias pnng_http_res_get_status = uint16_t function(nng_http_res *);
    alias pnng_http_res_set_status = int function(nng_http_res *, uint16_t);
    alias pnng_http_res_get_reason = const(char)*  function(nng_http_res *);
    alias pnng_http_res_set_reason = int function(nng_http_res *, const(char)* );
    alias pnng_http_res_set_header = int function(nng_http_res *, const(char)* , const(char)* );
    alias pnng_http_res_add_header = int function(nng_http_res *, const(char)* , const(char)* );
    alias pnng_http_res_del_header = int function(nng_http_res *, const(char)* );
    alias pnng_http_res_get_header = const(char)* function(nng_http_res *, const(char)* );
    alias pnng_http_res_set_version = int function(nng_http_res *, const(char)* );
    alias pnng_http_res_get_version = const(char)*  function(nng_http_res *);
    alias pnng_http_res_get_data = void function(nng_http_res *, void **, size_t *);
    alias pnng_http_res_set_data = int function(nng_http_res *, const void *, size_t);
    alias pnng_http_res_copy_data = int function(nng_http_res *, const void *, size_t);
    alias pnng_http_conn_close = void function(nng_http_conn *);
    alias pnng_http_conn_read = void function(nng_http_conn *, nng_aio *);
    alias pnng_http_conn_read_all = void function(nng_http_conn *, nng_aio *);
    alias pnng_http_conn_write = void function(nng_http_conn *, nng_aio *);
    alias pnng_http_conn_write_all = void function(nng_http_conn *, nng_aio *);
    alias pnng_http_conn_write_req = void function(nng_http_conn *, nng_http_req *, nng_aio *);
    alias pnng_http_conn_write_res = void function(nng_http_conn *, nng_http_res *, nng_aio *);
    alias pnng_http_conn_read_req = void function(nng_http_conn *, nng_http_req *, nng_aio *);
    alias pnng_http_conn_read_res = void function(nng_http_conn *, nng_http_res *, nng_aio *);
    alias pnng_http_req_reset = void function(nng_http_req *);
    alias pnng_http_res_reset = void function(nng_http_res *);
    alias pnng_http_handler_alloc = int function(nng_http_handler **, const(char)* , void **);
    alias pnng_http_handler_free = void function(nng_http_handler *);
    alias pnng_http_handler_alloc_file = int function(nng_http_handler **, const(char)* , const(char)* );
    alias pnng_http_handler_alloc_static = int function(nng_http_handler **, const(char)* , const void *, size_t, const(char)* );
    alias pnng_http_handler_alloc_redirect = int function(nng_http_handler **, const(char)* , uint16_t, const(char)* );
    alias pnng_http_handler_alloc_directory = int function(nng_http_handler **, const(char)* , const(char)* );
    alias pnng_http_handler_set_method = int function(nng_http_handler *, const(char)* );
    alias pnng_http_handler_set_host = int function(nng_http_handler *, const(char)* );
    alias pnng_http_handler_collect_body = int function(nng_http_handler *, bool, size_t);
    alias pnng_http_handler_set_tree = int function(nng_http_handler *);
    alias pnng_http_handler_set_data = int function(nng_http_handler *, void *, void **);
    alias pnng_http_handler_get_data = void * function(nng_http_handler *);
    alias pnng_http_server_hold = int function(nng_http_server **, const nng_url *);
    alias pnng_http_server_release = void function(nng_http_server *);
    alias pnng_http_server_start = int function(nng_http_server *);
    alias pnng_http_server_stop = void function(nng_http_server *);
    alias pnng_http_server_add_handler = int function(nng_http_server *, nng_http_handler *);
    alias pnng_http_server_del_handler = int function(nng_http_server *, nng_http_handler *);
    alias pnng_http_server_set_tls = int function(nng_http_server *, nng_tls_config *);
    alias pnng_http_server_get_tls = int function(nng_http_server *, nng_tls_config **);
    alias pnng_http_server_get_addr = int function(nng_http_server *, nng_sockaddr *);
    alias pnng_http_server_set_error_page = int function(nng_http_server *, uint16_t, const(char)* );
    alias pnng_http_server_set_error_file = int function(nng_http_server *, uint16_t, const(char)* );
    alias pnng_http_server_res_error = int function(nng_http_server *, nng_http_res *);
    alias pnng_http_hijack = int function(nng_http_conn *);
    alias pnng_http_client_alloc = int function(nng_http_client **, const nng_url *);
    alias pnng_http_client_free = void function(nng_http_client *);
    alias pnng_http_client_set_tls = int function(nng_http_client *, nng_tls_config *);
    alias pnng_http_client_get_tls = int function(nng_http_client *, nng_tls_config **);
    alias pnng_http_client_connect = void function(nng_http_client *, nng_aio *);
    alias pnng_http_conn_transact = void function(nng_http_conn *, nng_http_req *, nng_http_res *, nng_aio *);
    alias pnng_http_client_transact = void function(nng_http_client *, nng_http_req *, nng_http_res *, nng_aio *);

    // supplemental/tls/tls.h
    alias pnng_tls_config_alloc = int function(nng_tls_config **, nng_tls_mode);
    alias pnng_tls_config_hold = void function(nng_tls_config *);
    alias pnng_tls_config_free = void function(nng_tls_config *);
    alias pnng_tls_config_server_name = int function(nng_tls_config *, const(char)* );
    alias pnng_tls_config_ca_chain = int function(nng_tls_config *, const(char)* , const(char)* );
    alias pnng_tls_config_own_cert = int function(nng_tls_config *, const(char)* , const(char)* , const(char)* );
    alias pnng_tls_config_key = int function(nng_tls_config *, const uint8_t *, size_t);
    alias pnng_tls_config_pass = int function(nng_tls_config *, const(char)* );
    alias pnng_tls_config_auth_mode = int function(nng_tls_config *, nng_tls_auth_mode);
    alias pnng_tls_config_ca_file = int function(nng_tls_config *, const(char)* );
    alias pnng_tls_config_cert_key_file = int function(nng_tls_config *, const(char)* , const(char)* );

    // supplemental/util/options.h
    alias pnng_opts_parse = int function(int argc, const(char)*  argv, const nng_optspec *opts, int *val, char **optarg, int *optidx);

    // supplemental/util/platform.h
    alias pnng_clock = nng_time function();
    alias pnng_msleep = void function(nng_duration);
    alias pnng_thread_create = int function(nng_thread **, void **, void *);
    alias pnng_thread_destroy = void function(nng_thread *);
    alias pnng_mtx_alloc = int function(nng_mtx **);
    alias pnng_mtx_free = void function(nng_mtx *);
    alias pnng_mtx_lock = void function(nng_mtx *);
    alias pnng_mtx_unlock = void function(nng_mtx *);
    alias pnng_cv_alloc = int function(nng_cv **, nng_mtx *);
    alias pnng_cv_free = void function(nng_cv *);
    alias pnng_cv_wait = void function(nng_cv *);
    alias pnng_cv_until = int function(nng_cv *, nng_time);
    alias pnng_cv_wake = void function(nng_cv *);
    alias pnng_cv_wake1 = void function(nng_cv *);
    alias pnng_random = uint32_t function();

    // transport/inproc/inproc.h
    alias pnng_inproc_register = int function();

    // transport/ipc/ipc.h
    alias pnng_ipc_register = int function();

    // transport/tcp/tcp.h
    alias pnng_tcp_register = int function();

    // transport/tls/tls.h
    alias pnng_tls_register = int function();

    // transport/ws/websocket.h
    alias pnng_ws_register = int function();
    alias pnng_wss_register = int function();

    // transport/zerotier/zerotier.h
    alias pnng_zt_register = int function();
}

__gshared {
    pnng_fini nng_fini;
    pnng_close nng_close;
    pnng_socket_id nng_socket_id;
    pnng_closeall nng_closeall;
    pnng_setopt nng_setopt;
    pnng_setopt_bool nng_setopt_bool;
    pnng_setopt_int nng_setopt_int;
    pnng_setopt_ms nng_setopt_ms;
    pnng_setopt_size nng_setopt_size;
    pnng_setopt_uint64 nng_setopt_uint64;
    pnng_setopt_string nng_setopt_string;
    pnng_setopt_ptr nng_setopt_ptr;
    pnng_getopt nng_getopt;
    pnng_getopt_bool nng_getopt_bool;
    pnng_getopt_int nng_getopt_int;
    pnng_getopt_ms nng_getopt_ms;
    pnng_getopt_size nng_getopt_size;
    pnng_getopt_uint64 nng_getopt_uint64;
    pnng_getopt_ptr nng_getopt_ptr;
    pnng_getopt_string nng_getopt_string;
    pnng_socket_set nng_socket_set;
    pnng_socket_set_bool nng_socket_set_bool;
    pnng_socket_set_int nng_socket_set_int;
    pnng_socket_set_size nng_socket_set_size;
    pnng_socket_set_uint64 nng_socket_set_uint64;
    pnng_socket_set_string nng_socket_set_string;
    pnng_socket_set_ptr nng_socket_set_ptr;
    pnng_socket_set_ms nng_socket_set_ms;
    pnng_socket_set_addr nng_socket_set_addr;
    pnng_socket_get nng_socket_get;
    pnng_socket_get_bool nng_socket_get_bool;
    pnng_socket_get_int nng_socket_get_int;
    pnng_socket_get_size nng_socket_get_size;
    pnng_socket_get_uint64 nng_socket_get_uint64;
    pnng_socket_get_string nng_socket_get_string;
    pnng_socket_get_ptr nng_socket_get_ptr;
    pnng_socket_get_ms nng_socket_get_ms;
    pnng_socket_get_addr nng_socket_get_addr;
    pnng_pipe_notify nng_pipe_notify;
    pnng_listen nng_listen;
    pnng_dial nng_dial;
    pnng_dialer_create nng_dialer_create;
    pnng_listener_create nng_listener_create;
    pnng_dialer_start nng_dialer_start;
    pnng_listener_start nng_listener_start;
    pnng_dialer_close nng_dialer_close;
    pnng_listener_close nng_listener_close;
    pnng_dialer_id nng_dialer_id;
    pnng_listener_id nng_listener_id;
    pnng_dialer_setopt nng_dialer_setopt;
    pnng_dialer_setopt_bool nng_dialer_setopt_bool;
    pnng_dialer_setopt_int nng_dialer_setopt_int;
    pnng_dialer_setopt_ms nng_dialer_setopt_ms;
    pnng_dialer_setopt_size nng_dialer_setopt_size;
    pnng_dialer_setopt_uint64 nng_dialer_setopt_uint64;
    pnng_dialer_setopt_ptr nng_dialer_setopt_ptr;
    pnng_dialer_setopt_string nng_dialer_setopt_string;
    pnng_dialer_getopt nng_dialer_getopt;
    pnng_dialer_getopt_bool nng_dialer_getopt_bool;
    pnng_dialer_getopt_int nng_dialer_getopt_int;
    pnng_dialer_getopt_ms nng_dialer_getopt_ms;
    pnng_dialer_getopt_size nng_dialer_getopt_size;
    pnng_dialer_getopt_sockaddr nng_dialer_getopt_sockaddr;
    pnng_dialer_getopt_uint64 nng_dialer_getopt_uint64;
    pnng_dialer_getopt_ptr nng_dialer_getopt_ptr;
    pnng_dialer_getopt_string nng_dialer_getopt_string;
    pnng_dialer_set nng_dialer_set;
    pnng_dialer_set_bool nng_dialer_set_bool;
    pnng_dialer_set_int nng_dialer_set_int;
    pnng_dialer_set_size nng_dialer_set_size;
    pnng_dialer_set_uint64 nng_dialer_set_uint64;
    pnng_dialer_set_string nng_dialer_set_string;
    pnng_dialer_set_ptr nng_dialer_set_ptr;
    pnng_dialer_set_ms nng_dialer_set_ms;
    pnng_dialer_set_addr nng_dialer_set_addr;
    pnng_dialer_get nng_dialer_get;
    pnng_dialer_get_bool nng_dialer_get_bool;
    pnng_dialer_get_int nng_dialer_get_int;
    pnng_dialer_get_size nng_dialer_get_size;
    pnng_dialer_get_uint64 nng_dialer_get_uint64;
    pnng_dialer_get_string nng_dialer_get_string;
    pnng_dialer_get_ptr nng_dialer_get_ptr;
    pnng_dialer_get_ms nng_dialer_get_ms;
    pnng_dialer_get_addr nng_dialer_get_addr;
    pnng_listener_setopt nng_listener_setopt;
    pnng_listener_setopt_bool nng_listener_setopt_bool;
    pnng_listener_setopt_int nng_listener_setopt_int;
    pnng_listener_setopt_ms nng_listener_setopt_ms;
    pnng_listener_setopt_size nng_listener_setopt_size;
    pnng_listener_setopt_uint64 nng_listener_setopt_uint64;
    pnng_listener_setopt_ptr nng_listener_setopt_ptr;
    pnng_listener_setopt_string nng_listener_setopt_string;
    pnng_listener_getopt nng_listener_getopt;
    pnng_listener_getopt_bool nng_listener_getopt_bool;
    pnng_listener_getopt_int nng_listener_getopt_int;
    pnng_listener_getopt_ms nng_listener_getopt_ms;
    pnng_listener_getopt_size nng_listener_getopt_size;
    pnng_listener_getopt_sockaddr nng_listener_getopt_sockaddr;
    pnng_listener_getopt_uint64 nng_listener_getopt_uint64;
    pnng_listener_getopt_ptr nng_listener_getopt_ptr;
    pnng_listener_getopt_string nng_listener_getopt_string;
    pnng_listener_set nng_listener_set;
    pnng_listener_set_bool nng_listener_set_bool;
    pnng_listener_set_int nng_listener_set_int;
    pnng_listener_set_size nng_listener_set_size;
    pnng_listener_set_uint64 nng_listener_set_uint64;
    pnng_listener_set_string nng_listener_set_string;
    pnng_listener_set_ptr nng_listener_set_ptr;
    pnng_listener_set_ms nng_listener_set_ms;
    pnng_listener_set_addr nng_listener_set_addr;
    pnng_listener_get nng_listener_get;
    pnng_listener_get_bool nng_listener_get_bool;
    pnng_listener_get_int nng_listener_get_int;
    pnng_listener_get_size nng_listener_get_size;
    pnng_listener_get_uint64 nng_listener_get_uint64;
    pnng_listener_get_string nng_listener_get_string;
    pnng_listener_get_ptr nng_listener_get_ptr;
    pnng_listener_get_ms nng_listener_get_ms;
    pnng_listener_get_addr nng_listener_get_addr;
    pnng_strerror nng_strerror;
    pnng_send nng_send;
    pnng_recv nng_recv;
    pnng_sendmsg nng_sendmsg;
    pnng_recvmsg nng_recvmsg;
    pnng_send_aio nng_send_aio;
    pnng_recv_aio nng_recv_aio;
    pnng_ctx_open nng_ctx_open;
    pnng_ctx_close nng_ctx_close;
    pnng_ctx_id nng_ctx_id;
    pnng_ctx_recv nng_ctx_recv;
    pnng_ctx_send nng_ctx_send;
    pnng_ctx_getopt nng_ctx_getopt;
    pnng_ctx_getopt_bool nng_ctx_getopt_bool;
    pnng_ctx_getopt_int nng_ctx_getopt_int;
    pnng_ctx_getopt_ms nng_ctx_getopt_ms;
    pnng_ctx_getopt_size nng_ctx_getopt_size;
    pnng_ctx_setopt nng_ctx_setopt;
    pnng_ctx_setopt_bool nng_ctx_setopt_bool;
    pnng_ctx_setopt_int nng_ctx_setopt_int;
    pnng_ctx_setopt_ms nng_ctx_setopt_ms;
    pnng_ctx_setopt_size nng_ctx_setopt_size;
    pnng_ctx_get nng_ctx_get;
    pnng_ctx_get_bool nng_ctx_get_bool;
    pnng_ctx_get_int nng_ctx_get_int;
    pnng_ctx_get_size nng_ctx_get_size;
    pnng_ctx_get_uint64 nng_ctx_get_uint64;
    pnng_ctx_get_string nng_ctx_get_string;
    pnng_ctx_get_ptr nng_ctx_get_ptr;
    pnng_ctx_get_ms nng_ctx_get_ms;
    pnng_ctx_get_addr nng_ctx_get_addr;
    pnng_ctx_set nng_ctx_set;
    pnng_ctx_set_bool nng_ctx_set_bool;
    pnng_ctx_set_int nng_ctx_set_int;
    pnng_ctx_set_size nng_ctx_set_size;
    pnng_ctx_set_uint64 nng_ctx_set_uint64;
    pnng_ctx_set_string nng_ctx_set_string;
    pnng_ctx_set_ptr nng_ctx_set_ptr;
    pnng_ctx_set_ms nng_ctx_set_ms;
    pnng_ctx_set_addr nng_ctx_set_addr;
    pnng_alloc nng_alloc;
    pnng_free nng_free;
    pnng_strdup nng_strdup;
    pnng_strfree nng_strfree;
    pnng_aio_alloc nng_aio_alloc;
    pnng_aio_free nng_aio_free;
    pnng_aio_stop nng_aio_stop;
    pnng_aio_result nng_aio_result;
    pnng_aio_count nng_aio_count;
    pnng_aio_cancel nng_aio_cancel;
    pnng_aio_abort nng_aio_abort;
    pnng_aio_wait nng_aio_wait;
    pnng_aio_set_msg nng_aio_set_msg;
    pnng_aio_get_msg nng_aio_get_msg;
    pnng_aio_set_input nng_aio_set_input;
    pnng_aio_get_input nng_aio_get_input;
    pnng_aio_set_output nng_aio_set_output;
    pnng_aio_get_output nng_aio_get_output;
    pnng_aio_set_timeout nng_aio_set_timeout;
    pnng_aio_set_iov nng_aio_set_iov;
    pnng_aio_begin nng_aio_begin;
    pnng_aio_finish nng_aio_finish;
    pnng_aio_defer nng_aio_defer;
    pnng_sleep_aio nng_sleep_aio;
    pnng_msg_alloc nng_msg_alloc;
    pnng_msg_free nng_msg_free;
    pnng_msg_realloc nng_msg_realloc;
    pnng_msg_header nng_msg_header;
    pnng_msg_header_len nng_msg_header_len;
    pnng_msg_body nng_msg_body;
    pnng_msg_len nng_msg_len;
    pnng_msg_append nng_msg_append;
    pnng_msg_insert nng_msg_insert;
    pnng_msg_trim nng_msg_trim;
    pnng_msg_chop nng_msg_chop;
    pnng_msg_header_append nng_msg_header_append;
    pnng_msg_header_insert nng_msg_header_insert;
    pnng_msg_header_trim nng_msg_header_trim;
    pnng_msg_header_chop nng_msg_header_chop;
    pnng_msg_header_append_u16 nng_msg_header_append_u16;
    pnng_msg_header_append_u32 nng_msg_header_append_u32;
    pnng_msg_header_append_u64 nng_msg_header_append_u64;
    pnng_msg_header_insert_u16 nng_msg_header_insert_u16;
    pnng_msg_header_insert_u32 nng_msg_header_insert_u32;
    pnng_msg_header_insert_u64 nng_msg_header_insert_u64;
    pnng_msg_header_chop_u16 nng_msg_header_chop_u16;
    pnng_msg_header_chop_u32 nng_msg_header_chop_u32;
    pnng_msg_header_chop_u64 nng_msg_header_chop_u64;
    pnng_msg_header_trim_u16 nng_msg_header_trim_u16;
    pnng_msg_header_trim_u32 nng_msg_header_trim_u32;
    pnng_msg_header_trim_u64 nng_msg_header_trim_u64;
    pnng_msg_append_u16 nng_msg_append_u16;
    pnng_msg_append_u32 nng_msg_append_u32;
    pnng_msg_append_u64 nng_msg_append_u64;
    pnng_msg_insert_u16 nng_msg_insert_u16;
    pnng_msg_insert_u32 nng_msg_insert_u32;
    pnng_msg_insert_u64 nng_msg_insert_u64;
    pnng_msg_chop_u16 nng_msg_chop_u16;
    pnng_msg_chop_u32 nng_msg_chop_u32;
    pnng_msg_chop_u64 nng_msg_chop_u64;
    pnng_msg_trim_u16 nng_msg_trim_u16;
    pnng_msg_trim_u32 nng_msg_trim_u32;
    pnng_msg_trim_u64 nng_msg_trim_u64;
    pnng_msg_dup nng_msg_dup;
    pnng_msg_clear nng_msg_clear;
    pnng_msg_header_clear nng_msg_header_clear;
    pnng_msg_set_pipe nng_msg_set_pipe;
    pnng_msg_get_pipe nng_msg_get_pipe;
    pnng_msg_getopt nng_msg_getopt;
    pnng_pipe_getopt nng_pipe_getopt;
    pnng_pipe_getopt_bool nng_pipe_getopt_bool;
    pnng_pipe_getopt_int nng_pipe_getopt_int;
    pnng_pipe_getopt_ms nng_pipe_getopt_ms;
    pnng_pipe_getopt_size nng_pipe_getopt_size;
    pnng_pipe_getopt_sockaddr nng_pipe_getopt_sockaddr;
    pnng_pipe_getopt_uint64 nng_pipe_getopt_uint64;
    pnng_pipe_getopt_ptr nng_pipe_getopt_ptr;
    pnng_pipe_getopt_string nng_pipe_getopt_string;
    pnng_pipe_get nng_pipe_get;
    pnng_pipe_get_bool nng_pipe_get_bool;
    pnng_pipe_get_int nng_pipe_get_int;
    pnng_pipe_get_ms nng_pipe_get_ms;
    pnng_pipe_get_size nng_pipe_get_size;
    pnng_pipe_get_uint64 nng_pipe_get_uint64;
    pnng_pipe_get_string nng_pipe_get_string;
    pnng_pipe_get_ptr nng_pipe_get_ptr;
    pnng_pipe_get_addr nng_pipe_get_addr;
    pnng_pipe_close nng_pipe_close;
    pnng_pipe_id nng_pipe_id;
    pnng_pipe_socket nng_pipe_socket;
    pnng_pipe_dialer nng_pipe_dialer;
    pnng_pipe_listener nng_pipe_listener;
    pnng_stats_get nng_stats_get;
    pnng_stats_free nng_stats_free;
    pnng_stats_dump nng_stats_dump;
    pnng_stat_next nng_stat_next;
    pnng_stat_child nng_stat_child;
    pnng_stat_name nng_stat_name;
    pnng_stat_type nng_stat_type;
    pnng_stat_find nng_stat_find;
    pnng_stat_find_socket nng_stat_find_socket;
    pnng_stat_find_dialer nng_stat_find_dialer;
    pnng_stat_find_listener nng_stat_find_listener;
    pnng_stat_unit nng_stat_unit;
    pnng_stat_value nng_stat_value;
    pnng_stat_string nng_stat_string;
    pnng_stat_desc nng_stat_desc;
    pnng_stat_timestamp nng_stat_timestamp;
    pnng_device nng_device;
    pnng_url_parse nng_url_parse;
    pnng_url_free nng_url_free;
    pnng_url_clone nng_url_clone;
    pnng_version nng_version;
    pnng_stream_free nng_stream_free;
    pnng_stream_close nng_stream_close;
    pnng_stream_send nng_stream_send;
    pnng_stream_recv nng_stream_recv;
    pnng_stream_get nng_stream_get;
    pnng_stream_get_bool nng_stream_get_bool;
    pnng_stream_get_int nng_stream_get_int;
    pnng_stream_get_ms nng_stream_get_ms;
    pnng_stream_get_size nng_stream_get_size;
    pnng_stream_get_uint64 nng_stream_get_uint64;
    pnng_stream_get_string nng_stream_get_string;
    pnng_stream_get_ptr nng_stream_get_ptr;
    pnng_stream_get_addr nng_stream_get_addr;
    pnng_stream_set nng_stream_set;
    pnng_stream_set_bool nng_stream_set_bool;
    pnng_stream_set_int nng_stream_set_int;
    pnng_stream_set_ms nng_stream_set_ms;
    pnng_stream_set_size nng_stream_set_size;
    pnng_stream_set_uint64 nng_stream_set_uint64;
    pnng_stream_set_string nng_stream_set_string;
    pnng_stream_set_ptr nng_stream_set_ptr;
    pnng_stream_set_addr nng_stream_set_addr;
    pnng_stream_dialer_alloc nng_stream_dialer_alloc;
    pnng_stream_dialer_alloc_url nng_stream_dialer_alloc_url;
    pnng_stream_dialer_free nng_stream_dialer_free;
    pnng_stream_dialer_close nng_stream_dialer_close;
    pnng_stream_dialer_dial nng_stream_dialer_dial;
    pnng_stream_dialer_set nng_stream_dialer_set;
    pnng_stream_dialer_get nng_stream_dialer_get;
    pnng_stream_dialer_get_bool nng_stream_dialer_get_bool;
    pnng_stream_dialer_get_int nng_stream_dialer_get_int;
    pnng_stream_dialer_get_ms nng_stream_dialer_get_ms;
    pnng_stream_dialer_get_size nng_stream_dialer_get_size;
    pnng_stream_dialer_get_uint64 nng_stream_dialer_get_uint64;
    pnng_stream_dialer_get_string nng_stream_dialer_get_string;
    pnng_stream_dialer_get_ptr nng_stream_dialer_get_ptr;
    pnng_stream_dialer_get_addr nng_stream_dialer_get_addr;
    pnng_stream_dialer_set_bool nng_stream_dialer_set_bool;
    pnng_stream_dialer_set_int nng_stream_dialer_set_int;
    pnng_stream_dialer_set_ms nng_stream_dialer_set_ms;
    pnng_stream_dialer_set_size nng_stream_dialer_set_size;
    pnng_stream_dialer_set_uint64 nng_stream_dialer_set_uint64;
    pnng_stream_dialer_set_string nng_stream_dialer_set_string;
    pnng_stream_dialer_set_ptr nng_stream_dialer_set_ptr;
    pnng_stream_dialer_set_addr nng_stream_dialer_set_addr;
    pnng_stream_listener_alloc nng_stream_listener_alloc;
    pnng_stream_listener_alloc_url nng_stream_listener_alloc_url;
    pnng_stream_listener_free nng_stream_listener_free;
    pnng_stream_listener_close nng_stream_listener_close;
    pnng_stream_listener_listen nng_stream_listener_listen;
    pnng_stream_listener_accept nng_stream_listener_accept;
    pnng_stream_listener_set nng_stream_listener_set;
    pnng_stream_listener_get nng_stream_listener_get;
    pnng_stream_listener_get_bool nng_stream_listener_get_bool;
    pnng_stream_listener_get_int nng_stream_listener_get_int;
    pnng_stream_listener_get_ms nng_stream_listener_get_ms;
    pnng_stream_listener_get_size nng_stream_listener_get_size;
    pnng_stream_listener_get_uint64 nng_stream_listener_get_uint64;
    pnng_stream_listener_get_string nng_stream_listener_get_string;
    pnng_stream_listener_get_ptr nng_stream_listener_get_ptr;
    pnng_stream_listener_get_addr nng_stream_listener_get_addr;
    pnng_stream_listener_set_bool nng_stream_listener_set_bool;
    pnng_stream_listener_set_int nng_stream_listener_set_int;
    pnng_stream_listener_set_ms nng_stream_listener_set_ms;
    pnng_stream_listener_set_size nng_stream_listener_set_size;
    pnng_stream_listener_set_uint64 nng_stream_listener_set_uint64;
    pnng_stream_listener_set_string nng_stream_listener_set_string;
    pnng_stream_listener_set_ptr nng_stream_listener_set_ptr;
    pnng_stream_listener_set_addr nng_stream_listener_set_addr;
    pnn_cmsg_next nn_cmsg_next;
    pnn_socket nn_socket;
    pnn_setsockopt nn_setsockopt;
    pnn_getsockopt nn_getsockopt;
    pnn_bind nn_bind;
    pnn_connect nn_connect;
    pnn_shutdown nn_shutdown;
    pnn_send nn_send;
    pnn_recv nn_recv;
    pnn_sendmsg nn_sendmsg;
    pnn_recvmsg nn_recvmsg;
    pnn_close nn_close;
    pnn_poll nn_poll;
    pnn_device nn_device;
    pnn_get_statistic nn_get_statistic;
    pnn_allocmsg nn_allocmsg;
    pnn_reallocmsg nn_reallocmsg;
    pnn_freemsg nn_freemsg;
    pnn_errno nn_errno;
    pnn_strerror nn_strerror;
    pnn_term nn_term;
    pnng_bus0_open nng_bus0_open;
    pnng_bus0_open_raw nng_bus0_open_raw;
    pnng_bus0_open nng_bus_open;
    pnng_bus0_open_raw nng_bus_open_raw;
    pnng_pair0_open nng_pair0_open;
    pnng_pair0_open_raw nng_pair0_open_raw;
    //pnng_pair0_open nng_pair_open;
    //pnng_pair0_open_raw nng_pair_open_raw;
    pnng_pair1_open nng_pair1_open;
    pnng_pair1_open_raw nng_pair1_open_raw;
    //pnng_pair1_open nng_pair_open;
    //pnng_pair1_open_raw nng_pair_open_raw;
    pnng_pull0_open nng_pull0_open;
    pnng_pull0_open_raw nng_pull0_open_raw;
    pnng_pull0_open nng_pull_open;
    pnng_pull0_open_raw nng_pull_open_raw;
    pnng_push0_open nng_push0_open;
    pnng_push0_open_raw nng_push0_open_raw;
    pnng_push0_open nng_push_open;
    pnng_push0_open_raw nng_push_open_raw;
    pnng_pub0_open nng_pub0_open;
    pnng_pub0_open_raw nng_pub0_open_raw;
    pnng_pub0_open nng_pub_open;
    pnng_pub0_open_raw nng_pub_open_raw;
    pnng_sub0_open nng_sub0_open;
    pnng_sub0_open_raw nng_sub0_open_raw;
    pnng_sub0_open nng_sub_open;
    pnng_sub0_open_raw nng_sub_open_raw;
    pnng_rep0_open nng_rep0_open;
    pnng_rep0_open_raw nng_rep0_open_raw;
    pnng_rep0_open nng_rep_open;
    pnng_rep0_open_raw nng_rep_open_raw;
    pnng_respondent0_open nng_respondent0_open;
    pnng_respondent0_open_raw nng_respondent0_open_raw;
    pnng_respondent0_open nng_respondent_open;
    pnng_respondent0_open_raw nng_respondent_open_raw;
    pnng_surveyor0_open nng_surveyor0_open;
    pnng_surveyor0_open_raw nng_surveyor0_open_raw;
    pnng_surveyor0_open nng_surveyor_open;
    pnng_surveyor0_open_raw nng_surveyor_open_raw;
    pnng_http_req_alloc nng_http_req_alloc;
    pnng_http_req_free nng_http_req_free;
    pnng_http_req_get_method nng_http_req_get_method;
    pnng_http_req_get_version nng_http_req_get_version;
    pnng_http_req_get_uri nng_http_req_get_uri;
    pnng_http_req_set_header nng_http_req_set_header;
    pnng_http_req_add_header nng_http_req_add_header;
    pnng_http_req_del_header nng_http_req_del_header;
    pnng_http_req_get_header nng_http_req_get_header;
    pnng_http_req_set_method nng_http_req_set_method;
    pnng_http_req_set_version nng_http_req_set_version;
    pnng_http_req_set_uri nng_http_req_set_uri;
    pnng_http_req_set_data nng_http_req_set_data;
    pnng_http_req_copy_data nng_http_req_copy_data;
    pnng_http_req_get_data nng_http_req_get_data;
    pnng_http_res_alloc nng_http_res_alloc;
    pnng_http_res_alloc_error nng_http_res_alloc_error;
    pnng_http_res_free nng_http_res_free;
    pnng_http_res_get_status nng_http_res_get_status;
    pnng_http_res_set_status nng_http_res_set_status;
    pnng_http_res_get_reason nng_http_res_get_reason;
    pnng_http_res_set_reason nng_http_res_set_reason;
    pnng_http_res_set_header nng_http_res_set_header;
    pnng_http_res_add_header nng_http_res_add_header;
    pnng_http_res_del_header nng_http_res_del_header;
    pnng_http_res_get_header nng_http_res_get_header;
    pnng_http_res_set_version nng_http_res_set_version;
    pnng_http_res_get_version nng_http_res_get_version;
    pnng_http_res_get_data nng_http_res_get_data;
    pnng_http_res_set_data nng_http_res_set_data;
    pnng_http_res_copy_data nng_http_res_copy_data;
    pnng_http_conn_close nng_http_conn_close;
    pnng_http_conn_read nng_http_conn_read;
    pnng_http_conn_read_all nng_http_conn_read_all;
    pnng_http_conn_write nng_http_conn_write;
    pnng_http_conn_write_all nng_http_conn_write_all;
    pnng_http_conn_write_req nng_http_conn_write_req;
    pnng_http_conn_write_res nng_http_conn_write_res;
    pnng_http_conn_read_req nng_http_conn_read_req;
    pnng_http_conn_read_res nng_http_conn_read_res;
    pnng_http_req_reset nng_http_req_reset;
    pnng_http_res_reset nng_http_res_reset;
    pnng_http_handler_alloc nng_http_handler_alloc;
    pnng_http_handler_free nng_http_handler_free;
    pnng_http_handler_alloc_file nng_http_handler_alloc_file;
    pnng_http_handler_alloc_static nng_http_handler_alloc_static;
    pnng_http_handler_alloc_redirect nng_http_handler_alloc_redirect;
    pnng_http_handler_alloc_directory nng_http_handler_alloc_directory;
    pnng_http_handler_set_method nng_http_handler_set_method;
    pnng_http_handler_set_host nng_http_handler_set_host;
    pnng_http_handler_collect_body nng_http_handler_collect_body;
    pnng_http_handler_set_tree nng_http_handler_set_tree;
    pnng_http_handler_set_data nng_http_handler_set_data;
    pnng_http_handler_get_data nng_http_handler_get_data;
    pnng_http_server_hold nng_http_server_hold;
    pnng_http_server_release nng_http_server_release;
    pnng_http_server_start nng_http_server_start;
    pnng_http_server_stop nng_http_server_stop;
    pnng_http_server_add_handler nng_http_server_add_handler;
    pnng_http_server_del_handler nng_http_server_del_handler;
    pnng_http_server_set_tls nng_http_server_set_tls;
    pnng_http_server_get_tls nng_http_server_get_tls;
    pnng_http_server_get_addr nng_http_server_get_addr;
    pnng_http_server_set_error_page nng_http_server_set_error_page;
    pnng_http_server_set_error_file nng_http_server_set_error_file;
    pnng_http_server_res_error nng_http_server_res_error;
    pnng_http_hijack nng_http_hijack;
    pnng_http_client_alloc nng_http_client_alloc;
    pnng_http_client_free nng_http_client_free;
    pnng_http_client_set_tls nng_http_client_set_tls;
    pnng_http_client_get_tls nng_http_client_get_tls;
    pnng_http_client_connect nng_http_client_connect;
    pnng_http_conn_transact nng_http_conn_transact;
    pnng_http_client_transact nng_http_client_transact;
    pnng_tls_config_alloc nng_tls_config_alloc;
    pnng_tls_config_hold nng_tls_config_hold;
    pnng_tls_config_free nng_tls_config_free;
    pnng_tls_config_server_name nng_tls_config_server_name;
    pnng_tls_config_ca_chain nng_tls_config_ca_chain;
    pnng_tls_config_own_cert nng_tls_config_own_cert;
    pnng_tls_config_key nng_tls_config_key;
    pnng_tls_config_pass nng_tls_config_pass;
    pnng_tls_config_auth_mode nng_tls_config_auth_mode;
    pnng_tls_config_ca_file nng_tls_config_ca_file;
    pnng_tls_config_cert_key_file nng_tls_config_cert_key_file;
    pnng_opts_parse nng_opts_parse;
    pnng_clock nng_clock;
    pnng_msleep nng_msleep;
    pnng_thread_create nng_thread_create;
    pnng_thread_destroy nng_thread_destroy;
    pnng_mtx_alloc nng_mtx_alloc;
    pnng_mtx_free nng_mtx_free;
    pnng_mtx_lock nng_mtx_lock;
    pnng_mtx_unlock nng_mtx_unlock;
    pnng_cv_alloc nng_cv_alloc;
    pnng_cv_free nng_cv_free;
    pnng_cv_wait nng_cv_wait;
    pnng_cv_until nng_cv_until;
    pnng_cv_wake nng_cv_wake;
    pnng_cv_wake1 nng_cv_wake1;
    pnng_random nng_random;
    pnng_inproc_register nng_inproc_register;
    pnng_ipc_register nng_ipc_register;
    pnng_tcp_register nng_tcp_register;
    pnng_tls_register nng_tls_register;
    pnng_ws_register nng_ws_register;
    pnng_wss_register nng_wss_register;
    pnng_zt_register nng_zt_register;
}


private {
    SharedLib lib;
    NNGSupport loadedVersion;
}

enum NNGSupport {
    noLibrary,
    badLibrary,
    nng
}

NNGSupport loadedNNGVersion() { return loadedVersion; }
bool isNNGLoaded() { return lib != invalidHandle; }


NNGSupport loadNNG() {
    version(Windows) {
        const(char)[][1] libNames = [
            "./nng/build/Release/nng.lib"
        ];
    }
    else {
        const(char)[][1] libNames = [
            "./nng/build/libnng.a"
        ];
    }

    NNGSupport ret;
    foreach(name; libNames) {
        ret = loadNNG(name.ptr);
        if(ret != NNGSupport.noLibrary) break;
    }
    return ret;
}

NNGSupport loadNNG(const(char)* libName)
{
    lib = load(libName);
    if(lib == invalidHandle) {
        return NNGSupport.noLibrary;
    }

    auto errCount = errorCount();
    loadedVersion = NNGSupport.badLibrary;


    lib.bindSymbol(cast(void**)&nng_fini, "nng_fini");
    lib.bindSymbol(cast(void**)&nng_close, "nng_close");
    lib.bindSymbol(cast(void**)&nng_socket_id, "nng_socket_id");
    lib.bindSymbol(cast(void**)&nng_closeall, "nng_closeall");
    lib.bindSymbol(cast(void**)&nng_setopt, "nng_setopt");
    lib.bindSymbol(cast(void**)&nng_setopt_bool, "nng_setopt_bool");
    lib.bindSymbol(cast(void**)&nng_setopt_int, "nng_setopt_int");
    lib.bindSymbol(cast(void**)&nng_setopt_ms, "nng_setopt_ms");
    lib.bindSymbol(cast(void**)&nng_setopt_size, "nng_setopt_size");
    lib.bindSymbol(cast(void**)&nng_setopt_uint64, "nng_setopt_uint64");
    lib.bindSymbol(cast(void**)&nng_setopt_string, "nng_setopt_string");
    lib.bindSymbol(cast(void**)&nng_setopt_ptr, "nng_setopt_ptr");
    lib.bindSymbol(cast(void**)&nng_getopt, "nng_getopt");
    lib.bindSymbol(cast(void**)&nng_getopt_bool, "nng_getopt_bool");
    lib.bindSymbol(cast(void**)&nng_getopt_int, "nng_getopt_int");
    lib.bindSymbol(cast(void**)&nng_getopt_ms, "nng_getopt_ms");
    lib.bindSymbol(cast(void**)&nng_getopt_size, "nng_getopt_size");
    lib.bindSymbol(cast(void**)&nng_getopt_uint64, "nng_getopt_uint64");
    lib.bindSymbol(cast(void**)&nng_getopt_ptr, "nng_getopt_ptr");
    lib.bindSymbol(cast(void**)&nng_getopt_string, "nng_getopt_string");
    lib.bindSymbol(cast(void**)&nng_socket_set, "nng_socket_set");
    lib.bindSymbol(cast(void**)&nng_socket_set_bool, "nng_socket_set_bool");
    lib.bindSymbol(cast(void**)&nng_socket_set_int, "nng_socket_set_int");
    lib.bindSymbol(cast(void**)&nng_socket_set_size, "nng_socket_set_size");
    lib.bindSymbol(cast(void**)&nng_socket_set_uint64, "nng_socket_set_uint64");
    lib.bindSymbol(cast(void**)&nng_socket_set_string, "nng_socket_set_string");
    lib.bindSymbol(cast(void**)&nng_socket_set_ptr, "nng_socket_set_ptr");
    lib.bindSymbol(cast(void**)&nng_socket_set_ms, "nng_socket_set_ms");
    lib.bindSymbol(cast(void**)&nng_socket_set_addr, "nng_socket_set_addr");
    lib.bindSymbol(cast(void**)&nng_socket_get, "nng_socket_get");
    lib.bindSymbol(cast(void**)&nng_socket_get_bool, "nng_socket_get_bool");
    lib.bindSymbol(cast(void**)&nng_socket_get_int, "nng_socket_get_int");
    lib.bindSymbol(cast(void**)&nng_socket_get_size, "nng_socket_get_size");
    lib.bindSymbol(cast(void**)&nng_socket_get_uint64, "nng_socket_get_uint64");
    lib.bindSymbol(cast(void**)&nng_socket_get_string, "nng_socket_get_string");
    lib.bindSymbol(cast(void**)&nng_socket_get_ptr, "nng_socket_get_ptr");
    lib.bindSymbol(cast(void**)&nng_socket_get_ms, "nng_socket_get_ms");
    lib.bindSymbol(cast(void**)&nng_socket_get_addr, "nng_socket_get_addr");
    lib.bindSymbol(cast(void**)&nng_pipe_notify, "nng_pipe_notify");
    lib.bindSymbol(cast(void**)&nng_listen, "nng_listen");
    lib.bindSymbol(cast(void**)&nng_dial, "nng_dial");
    lib.bindSymbol(cast(void**)&nng_dialer_create, "nng_dialer_create");
    lib.bindSymbol(cast(void**)&nng_listener_create, "nng_listener_create");
    lib.bindSymbol(cast(void**)&nng_dialer_start, "nng_dialer_start");
    lib.bindSymbol(cast(void**)&nng_listener_start, "nng_listener_start");
    lib.bindSymbol(cast(void**)&nng_dialer_close, "nng_dialer_close");
    lib.bindSymbol(cast(void**)&nng_listener_close, "nng_listener_close");
    lib.bindSymbol(cast(void**)&nng_dialer_id, "nng_dialer_id");
    lib.bindSymbol(cast(void**)&nng_listener_id, "nng_listener_id");
    lib.bindSymbol(cast(void**)&nng_dialer_setopt, "nng_dialer_setopt");
    lib.bindSymbol(cast(void**)&nng_dialer_setopt_bool, "nng_dialer_setopt_bool");
    lib.bindSymbol(cast(void**)&nng_dialer_setopt_int, "nng_dialer_setopt_int");
    lib.bindSymbol(cast(void**)&nng_dialer_setopt_ms, "nng_dialer_setopt_ms");
    lib.bindSymbol(cast(void**)&nng_dialer_setopt_size, "nng_dialer_setopt_size");
    lib.bindSymbol(cast(void**)&nng_dialer_setopt_uint64, "nng_dialer_setopt_uint64");
    lib.bindSymbol(cast(void**)&nng_dialer_setopt_ptr, "nng_dialer_setopt_ptr");
    lib.bindSymbol(cast(void**)&nng_dialer_setopt_string, "nng_dialer_setopt_string");
    lib.bindSymbol(cast(void**)&nng_dialer_getopt, "nng_dialer_getopt");
    lib.bindSymbol(cast(void**)&nng_dialer_getopt_bool, "nng_dialer_getopt_bool");
    lib.bindSymbol(cast(void**)&nng_dialer_getopt_int, "nng_dialer_getopt_int");
    lib.bindSymbol(cast(void**)&nng_dialer_getopt_ms, "nng_dialer_getopt_ms");
    lib.bindSymbol(cast(void**)&nng_dialer_getopt_size, "nng_dialer_getopt_size");
    lib.bindSymbol(cast(void**)&nng_dialer_getopt_sockaddr, "nng_dialer_getopt_sockaddr");
    lib.bindSymbol(cast(void**)&nng_dialer_getopt_uint64, "nng_dialer_getopt_uint64");
    lib.bindSymbol(cast(void**)&nng_dialer_getopt_ptr, "nng_dialer_getopt_ptr");
    lib.bindSymbol(cast(void**)&nng_dialer_getopt_string, "nng_dialer_getopt_string");
    lib.bindSymbol(cast(void**)&nng_dialer_set, "nng_dialer_set");
    lib.bindSymbol(cast(void**)&nng_dialer_set_bool, "nng_dialer_set_bool");
    lib.bindSymbol(cast(void**)&nng_dialer_set_int, "nng_dialer_set_int");
    lib.bindSymbol(cast(void**)&nng_dialer_set_size, "nng_dialer_set_size");
    lib.bindSymbol(cast(void**)&nng_dialer_set_uint64, "nng_dialer_set_uint64");
    lib.bindSymbol(cast(void**)&nng_dialer_set_string, "nng_dialer_set_string");
    lib.bindSymbol(cast(void**)&nng_dialer_set_ptr, "nng_dialer_set_ptr");
    lib.bindSymbol(cast(void**)&nng_dialer_set_ms, "nng_dialer_set_ms");
    lib.bindSymbol(cast(void**)&nng_dialer_set_addr, "nng_dialer_set_addr");
    lib.bindSymbol(cast(void**)&nng_dialer_get, "nng_dialer_get");
    lib.bindSymbol(cast(void**)&nng_dialer_get_bool, "nng_dialer_get_bool");
    lib.bindSymbol(cast(void**)&nng_dialer_get_int, "nng_dialer_get_int");
    lib.bindSymbol(cast(void**)&nng_dialer_get_size, "nng_dialer_get_size");
    lib.bindSymbol(cast(void**)&nng_dialer_get_uint64, "nng_dialer_get_uint64");
    lib.bindSymbol(cast(void**)&nng_dialer_get_string, "nng_dialer_get_string");
    lib.bindSymbol(cast(void**)&nng_dialer_get_ptr, "nng_dialer_get_ptr");
    lib.bindSymbol(cast(void**)&nng_dialer_get_ms, "nng_dialer_get_ms");
    lib.bindSymbol(cast(void**)&nng_dialer_get_addr, "nng_dialer_get_addr");
    lib.bindSymbol(cast(void**)&nng_listener_setopt, "nng_listener_setopt");
    lib.bindSymbol(cast(void**)&nng_listener_setopt_bool, "nng_listener_setopt_bool");
    lib.bindSymbol(cast(void**)&nng_listener_setopt_int, "nng_listener_setopt_int");
    lib.bindSymbol(cast(void**)&nng_listener_setopt_ms, "nng_listener_setopt_ms");
    lib.bindSymbol(cast(void**)&nng_listener_setopt_size, "nng_listener_setopt_size");
    lib.bindSymbol(cast(void**)&nng_listener_setopt_uint64, "nng_listener_setopt_uint64");
    lib.bindSymbol(cast(void**)&nng_listener_setopt_ptr, "nng_listener_setopt_ptr");
    lib.bindSymbol(cast(void**)&nng_listener_setopt_string, "nng_listener_setopt_string");
    lib.bindSymbol(cast(void**)&nng_listener_getopt, "nng_listener_getopt");
    lib.bindSymbol(cast(void**)&nng_listener_getopt_bool, "nng_listener_getopt_bool");
    lib.bindSymbol(cast(void**)&nng_listener_getopt_int, "nng_listener_getopt_int");
    lib.bindSymbol(cast(void**)&nng_listener_getopt_ms, "nng_listener_getopt_ms");
    lib.bindSymbol(cast(void**)&nng_listener_getopt_size, "nng_listener_getopt_size");
    lib.bindSymbol(cast(void**)&nng_listener_getopt_sockaddr, "nng_listener_getopt_sockaddr");
    lib.bindSymbol(cast(void**)&nng_listener_getopt_uint64, "nng_listener_getopt_uint64");
    lib.bindSymbol(cast(void**)&nng_listener_getopt_ptr, "nng_listener_getopt_ptr");
    lib.bindSymbol(cast(void**)&nng_listener_getopt_string, "nng_listener_getopt_string");
    lib.bindSymbol(cast(void**)&nng_listener_set, "nng_listener_set");
    lib.bindSymbol(cast(void**)&nng_listener_set_bool, "nng_listener_set_bool");
    lib.bindSymbol(cast(void**)&nng_listener_set_int, "nng_listener_set_int");
    lib.bindSymbol(cast(void**)&nng_listener_set_size, "nng_listener_set_size");
    lib.bindSymbol(cast(void**)&nng_listener_set_uint64, "nng_listener_set_uint64");
    lib.bindSymbol(cast(void**)&nng_listener_set_string, "nng_listener_set_string");
    lib.bindSymbol(cast(void**)&nng_listener_set_ptr, "nng_listener_set_ptr");
    lib.bindSymbol(cast(void**)&nng_listener_set_ms, "nng_listener_set_ms");
    lib.bindSymbol(cast(void**)&nng_listener_set_addr, "nng_listener_set_addr");
    lib.bindSymbol(cast(void**)&nng_listener_get, "nng_listener_get");
    lib.bindSymbol(cast(void**)&nng_listener_get_bool, "nng_listener_get_bool");
    lib.bindSymbol(cast(void**)&nng_listener_get_int, "nng_listener_get_int");
    lib.bindSymbol(cast(void**)&nng_listener_get_size, "nng_listener_get_size");
    lib.bindSymbol(cast(void**)&nng_listener_get_uint64, "nng_listener_get_uint64");
    lib.bindSymbol(cast(void**)&nng_listener_get_string, "nng_listener_get_string");
    lib.bindSymbol(cast(void**)&nng_listener_get_ptr, "nng_listener_get_ptr");
    lib.bindSymbol(cast(void**)&nng_listener_get_ms, "nng_listener_get_ms");
    lib.bindSymbol(cast(void**)&nng_listener_get_addr, "nng_listener_get_addr");
    lib.bindSymbol(cast(void**)&nng_strerror, "nng_strerror");
    lib.bindSymbol(cast(void**)&nng_send, "nng_send");
    lib.bindSymbol(cast(void**)&nng_recv, "nng_recv");
    lib.bindSymbol(cast(void**)&nng_sendmsg, "nng_sendmsg");
    lib.bindSymbol(cast(void**)&nng_recvmsg, "nng_recvmsg");
    lib.bindSymbol(cast(void**)&nng_send_aio, "nng_send_aio");
    lib.bindSymbol(cast(void**)&nng_recv_aio, "nng_recv_aio");
    lib.bindSymbol(cast(void**)&nng_ctx_open, "nng_ctx_open");
    lib.bindSymbol(cast(void**)&nng_ctx_close, "nng_ctx_close");
    lib.bindSymbol(cast(void**)&nng_ctx_id, "nng_ctx_id");
    lib.bindSymbol(cast(void**)&nng_ctx_recv, "nng_ctx_recv");
    lib.bindSymbol(cast(void**)&nng_ctx_send, "nng_ctx_send");
    lib.bindSymbol(cast(void**)&nng_ctx_getopt, "nng_ctx_getopt");
    lib.bindSymbol(cast(void**)&nng_ctx_getopt_bool, "nng_ctx_getopt_bool");
    lib.bindSymbol(cast(void**)&nng_ctx_getopt_int, "nng_ctx_getopt_int");
    lib.bindSymbol(cast(void**)&nng_ctx_getopt_ms, "nng_ctx_getopt_ms");
    lib.bindSymbol(cast(void**)&nng_ctx_getopt_size, "nng_ctx_getopt_size");
    lib.bindSymbol(cast(void**)&nng_ctx_setopt, "nng_ctx_setopt");
    lib.bindSymbol(cast(void**)&nng_ctx_setopt_bool, "nng_ctx_setopt_bool");
    lib.bindSymbol(cast(void**)&nng_ctx_setopt_int, "nng_ctx_setopt_int");
    lib.bindSymbol(cast(void**)&nng_ctx_setopt_ms, "nng_ctx_setopt_ms");
    lib.bindSymbol(cast(void**)&nng_ctx_setopt_size, "nng_ctx_setopt_size");
    lib.bindSymbol(cast(void**)&nng_ctx_get, "nng_ctx_get");
    lib.bindSymbol(cast(void**)&nng_ctx_get_bool, "nng_ctx_get_bool");
    lib.bindSymbol(cast(void**)&nng_ctx_get_int, "nng_ctx_get_int");
    lib.bindSymbol(cast(void**)&nng_ctx_get_size, "nng_ctx_get_size");
    lib.bindSymbol(cast(void**)&nng_ctx_get_uint64, "nng_ctx_get_uint64");
    lib.bindSymbol(cast(void**)&nng_ctx_get_string, "nng_ctx_get_string");
    lib.bindSymbol(cast(void**)&nng_ctx_get_ptr, "nng_ctx_get_ptr");
    lib.bindSymbol(cast(void**)&nng_ctx_get_ms, "nng_ctx_get_ms");
    lib.bindSymbol(cast(void**)&nng_ctx_get_addr, "nng_ctx_get_addr");
    lib.bindSymbol(cast(void**)&nng_ctx_set, "nng_ctx_set");
    lib.bindSymbol(cast(void**)&nng_ctx_set_bool, "nng_ctx_set_bool");
    lib.bindSymbol(cast(void**)&nng_ctx_set_int, "nng_ctx_set_int");
    lib.bindSymbol(cast(void**)&nng_ctx_set_size, "nng_ctx_set_size");
    lib.bindSymbol(cast(void**)&nng_ctx_set_uint64, "nng_ctx_set_uint64");
    lib.bindSymbol(cast(void**)&nng_ctx_set_string, "nng_ctx_set_string");
    lib.bindSymbol(cast(void**)&nng_ctx_set_ptr, "nng_ctx_set_ptr");
    lib.bindSymbol(cast(void**)&nng_ctx_set_ms, "nng_ctx_set_ms");
    lib.bindSymbol(cast(void**)&nng_ctx_set_addr, "nng_ctx_set_addr");
    lib.bindSymbol(cast(void**)&nng_alloc, "nng_alloc");
    lib.bindSymbol(cast(void**)&nng_free, "nng_free");
    lib.bindSymbol(cast(void**)&nng_strdup, "nng_strdup");
    lib.bindSymbol(cast(void**)&nng_strfree, "nng_strfree");
    lib.bindSymbol(cast(void**)&nng_aio_alloc, "nng_aio_alloc");
    lib.bindSymbol(cast(void**)&nng_aio_free, "nng_aio_free");
    lib.bindSymbol(cast(void**)&nng_aio_stop, "nng_aio_stop");
    lib.bindSymbol(cast(void**)&nng_aio_result, "nng_aio_result");
    lib.bindSymbol(cast(void**)&nng_aio_count, "nng_aio_count");
    lib.bindSymbol(cast(void**)&nng_aio_cancel, "nng_aio_cancel");
    lib.bindSymbol(cast(void**)&nng_aio_abort, "nng_aio_abort");
    lib.bindSymbol(cast(void**)&nng_aio_wait, "nng_aio_wait");
    lib.bindSymbol(cast(void**)&nng_aio_set_msg, "nng_aio_set_msg");
    lib.bindSymbol(cast(void**)&nng_aio_get_msg, "nng_aio_get_msg");
    lib.bindSymbol(cast(void**)&nng_aio_set_input, "nng_aio_set_input");
    lib.bindSymbol(cast(void**)&nng_aio_get_input, "nng_aio_get_input");
    lib.bindSymbol(cast(void**)&nng_aio_set_output, "nng_aio_set_output");
    lib.bindSymbol(cast(void**)&nng_aio_get_output, "nng_aio_get_output");
    lib.bindSymbol(cast(void**)&nng_aio_set_timeout, "nng_aio_set_timeout");
    lib.bindSymbol(cast(void**)&nng_aio_set_iov, "nng_aio_set_iov");
    lib.bindSymbol(cast(void**)&nng_aio_begin, "nng_aio_begin");
    lib.bindSymbol(cast(void**)&nng_aio_finish, "nng_aio_finish");
    lib.bindSymbol(cast(void**)&nng_aio_defer, "nng_aio_defer");
    lib.bindSymbol(cast(void**)&nng_sleep_aio, "nng_sleep_aio");
    lib.bindSymbol(cast(void**)&nng_msg_alloc, "nng_msg_alloc");
    lib.bindSymbol(cast(void**)&nng_msg_free, "nng_msg_free");
    lib.bindSymbol(cast(void**)&nng_msg_realloc, "nng_msg_realloc");
    lib.bindSymbol(cast(void**)&nng_msg_header, "nng_msg_header");
    lib.bindSymbol(cast(void**)&nng_msg_header_len, "nng_msg_header_len");
    lib.bindSymbol(cast(void**)&nng_msg_body, "nng_msg_body");
    lib.bindSymbol(cast(void**)&nng_msg_len, "nng_msg_len");
    lib.bindSymbol(cast(void**)&nng_msg_append, "nng_msg_append");
    lib.bindSymbol(cast(void**)&nng_msg_insert, "nng_msg_insert");
    lib.bindSymbol(cast(void**)&nng_msg_trim, "nng_msg_trim");
    lib.bindSymbol(cast(void**)&nng_msg_chop, "nng_msg_chop");
    lib.bindSymbol(cast(void**)&nng_msg_header_append, "nng_msg_header_append");
    lib.bindSymbol(cast(void**)&nng_msg_header_insert, "nng_msg_header_insert");
    lib.bindSymbol(cast(void**)&nng_msg_header_trim, "nng_msg_header_trim");
    lib.bindSymbol(cast(void**)&nng_msg_header_chop, "nng_msg_header_chop");
    lib.bindSymbol(cast(void**)&nng_msg_header_append_u16, "nng_msg_header_append_u16");
    lib.bindSymbol(cast(void**)&nng_msg_header_append_u32, "nng_msg_header_append_u32");
    lib.bindSymbol(cast(void**)&nng_msg_header_append_u64, "nng_msg_header_append_u64");
    lib.bindSymbol(cast(void**)&nng_msg_header_insert_u16, "nng_msg_header_insert_u16");
    lib.bindSymbol(cast(void**)&nng_msg_header_insert_u32, "nng_msg_header_insert_u32");
    lib.bindSymbol(cast(void**)&nng_msg_header_insert_u64, "nng_msg_header_insert_u64");
    lib.bindSymbol(cast(void**)&nng_msg_header_chop_u16, "nng_msg_header_chop_u16");
    lib.bindSymbol(cast(void**)&nng_msg_header_chop_u32, "nng_msg_header_chop_u32");
    lib.bindSymbol(cast(void**)&nng_msg_header_chop_u64, "nng_msg_header_chop_u64");
    lib.bindSymbol(cast(void**)&nng_msg_header_trim_u16, "nng_msg_header_trim_u16");
    lib.bindSymbol(cast(void**)&nng_msg_header_trim_u32, "nng_msg_header_trim_u32");
    lib.bindSymbol(cast(void**)&nng_msg_header_trim_u64, "nng_msg_header_trim_u64");
    lib.bindSymbol(cast(void**)&nng_msg_append_u16, "nng_msg_append_u16");
    lib.bindSymbol(cast(void**)&nng_msg_append_u32, "nng_msg_append_u32");
    lib.bindSymbol(cast(void**)&nng_msg_append_u64, "nng_msg_append_u64");
    lib.bindSymbol(cast(void**)&nng_msg_insert_u16, "nng_msg_insert_u16");
    lib.bindSymbol(cast(void**)&nng_msg_insert_u32, "nng_msg_insert_u32");
    lib.bindSymbol(cast(void**)&nng_msg_insert_u64, "nng_msg_insert_u64");
    lib.bindSymbol(cast(void**)&nng_msg_chop_u16, "nng_msg_chop_u16");
    lib.bindSymbol(cast(void**)&nng_msg_chop_u32, "nng_msg_chop_u32");
    lib.bindSymbol(cast(void**)&nng_msg_chop_u64, "nng_msg_chop_u64");
    lib.bindSymbol(cast(void**)&nng_msg_trim_u16, "nng_msg_trim_u16");
    lib.bindSymbol(cast(void**)&nng_msg_trim_u32, "nng_msg_trim_u32");
    lib.bindSymbol(cast(void**)&nng_msg_trim_u64, "nng_msg_trim_u64");
    lib.bindSymbol(cast(void**)&nng_msg_dup, "nng_msg_dup");
    lib.bindSymbol(cast(void**)&nng_msg_clear, "nng_msg_clear");
    lib.bindSymbol(cast(void**)&nng_msg_header_clear, "nng_msg_header_clear");
    lib.bindSymbol(cast(void**)&nng_msg_set_pipe, "nng_msg_set_pipe");
    lib.bindSymbol(cast(void**)&nng_msg_get_pipe, "nng_msg_get_pipe");
    lib.bindSymbol(cast(void**)&nng_msg_getopt, "nng_msg_getopt");
    lib.bindSymbol(cast(void**)&nng_pipe_getopt, "nng_pipe_getopt");
    lib.bindSymbol(cast(void**)&nng_pipe_getopt_bool, "nng_pipe_getopt_bool");
    lib.bindSymbol(cast(void**)&nng_pipe_getopt_int, "nng_pipe_getopt_int");
    lib.bindSymbol(cast(void**)&nng_pipe_getopt_ms, "nng_pipe_getopt_ms");
    lib.bindSymbol(cast(void**)&nng_pipe_getopt_size, "nng_pipe_getopt_size");
    lib.bindSymbol(cast(void**)&nng_pipe_getopt_sockaddr, "nng_pipe_getopt_sockaddr");
    lib.bindSymbol(cast(void**)&nng_pipe_getopt_uint64, "nng_pipe_getopt_uint64");
    lib.bindSymbol(cast(void**)&nng_pipe_getopt_ptr, "nng_pipe_getopt_ptr");
    lib.bindSymbol(cast(void**)&nng_pipe_getopt_string, "nng_pipe_getopt_string");
    lib.bindSymbol(cast(void**)&nng_pipe_get, "nng_pipe_get");
    lib.bindSymbol(cast(void**)&nng_pipe_get_bool, "nng_pipe_get_bool");
    lib.bindSymbol(cast(void**)&nng_pipe_get_int, "nng_pipe_get_int");
    lib.bindSymbol(cast(void**)&nng_pipe_get_ms, "nng_pipe_get_ms");
    lib.bindSymbol(cast(void**)&nng_pipe_get_size, "nng_pipe_get_size");
    lib.bindSymbol(cast(void**)&nng_pipe_get_uint64, "nng_pipe_get_uint64");
    lib.bindSymbol(cast(void**)&nng_pipe_get_string, "nng_pipe_get_string");
    lib.bindSymbol(cast(void**)&nng_pipe_get_ptr, "nng_pipe_get_ptr");
    lib.bindSymbol(cast(void**)&nng_pipe_get_addr, "nng_pipe_get_addr");
    lib.bindSymbol(cast(void**)&nng_pipe_close, "nng_pipe_close");
    lib.bindSymbol(cast(void**)&nng_pipe_id, "nng_pipe_id");
    lib.bindSymbol(cast(void**)&nng_pipe_socket, "nng_pipe_socket");
    lib.bindSymbol(cast(void**)&nng_pipe_dialer, "nng_pipe_dialer");
    lib.bindSymbol(cast(void**)&nng_pipe_listener, "nng_pipe_listener");
    lib.bindSymbol(cast(void**)&nng_stats_get, "nng_stats_get");
    lib.bindSymbol(cast(void**)&nng_stats_free, "nng_stats_free");
    lib.bindSymbol(cast(void**)&nng_stats_dump, "nng_stats_dump");
    lib.bindSymbol(cast(void**)&nng_stat_next, "nng_stat_next");
    lib.bindSymbol(cast(void**)&nng_stat_child, "nng_stat_child");
    lib.bindSymbol(cast(void**)&nng_stat_name, "nng_stat_name");
    lib.bindSymbol(cast(void**)&nng_stat_type, "nng_stat_type");
    lib.bindSymbol(cast(void**)&nng_stat_find, "nng_stat_find");
    lib.bindSymbol(cast(void**)&nng_stat_find_socket, "nng_stat_find_socket");
    lib.bindSymbol(cast(void**)&nng_stat_find_dialer, "nng_stat_find_dialer");
    lib.bindSymbol(cast(void**)&nng_stat_find_listener, "nng_stat_find_listener");
    lib.bindSymbol(cast(void**)&nng_stat_unit, "nng_stat_unit");
    lib.bindSymbol(cast(void**)&nng_stat_value, "nng_stat_value");
    lib.bindSymbol(cast(void**)&nng_stat_string, "nng_stat_string");
    lib.bindSymbol(cast(void**)&nng_stat_desc, "nng_stat_desc");
    lib.bindSymbol(cast(void**)&nng_stat_timestamp, "nng_stat_timestamp");
    lib.bindSymbol(cast(void**)&nng_device, "nng_device");
    lib.bindSymbol(cast(void**)&nng_url_parse, "nng_url_parse");
    lib.bindSymbol(cast(void**)&nng_url_free, "nng_url_free");
    lib.bindSymbol(cast(void**)&nng_url_clone, "nng_url_clone");
    lib.bindSymbol(cast(void**)&nng_version, "nng_version");
    lib.bindSymbol(cast(void**)&nng_stream_free, "nng_stream_free");
    lib.bindSymbol(cast(void**)&nng_stream_close, "nng_stream_close");
    lib.bindSymbol(cast(void**)&nng_stream_send, "nng_stream_send");
    lib.bindSymbol(cast(void**)&nng_stream_recv, "nng_stream_recv");
    lib.bindSymbol(cast(void**)&nng_stream_get, "nng_stream_get");
    lib.bindSymbol(cast(void**)&nng_stream_get_bool, "nng_stream_get_bool");
    lib.bindSymbol(cast(void**)&nng_stream_get_int, "nng_stream_get_int");
    lib.bindSymbol(cast(void**)&nng_stream_get_ms, "nng_stream_get_ms");
    lib.bindSymbol(cast(void**)&nng_stream_get_size, "nng_stream_get_size");
    lib.bindSymbol(cast(void**)&nng_stream_get_uint64, "nng_stream_get_uint64");
    lib.bindSymbol(cast(void**)&nng_stream_get_string, "nng_stream_get_string");
    lib.bindSymbol(cast(void**)&nng_stream_get_ptr, "nng_stream_get_ptr");
    lib.bindSymbol(cast(void**)&nng_stream_get_addr, "nng_stream_get_addr");
    lib.bindSymbol(cast(void**)&nng_stream_set, "nng_stream_set");
    lib.bindSymbol(cast(void**)&nng_stream_set_bool, "nng_stream_set_bool");
    lib.bindSymbol(cast(void**)&nng_stream_set_int, "nng_stream_set_int");
    lib.bindSymbol(cast(void**)&nng_stream_set_ms, "nng_stream_set_ms");
    lib.bindSymbol(cast(void**)&nng_stream_set_size, "nng_stream_set_size");
    lib.bindSymbol(cast(void**)&nng_stream_set_uint64, "nng_stream_set_uint64");
    lib.bindSymbol(cast(void**)&nng_stream_set_string, "nng_stream_set_string");
    lib.bindSymbol(cast(void**)&nng_stream_set_ptr, "nng_stream_set_ptr");
    lib.bindSymbol(cast(void**)&nng_stream_set_addr, "nng_stream_set_addr");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_alloc, "nng_stream_dialer_alloc");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_alloc_url, "nng_stream_dialer_alloc_url");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_free, "nng_stream_dialer_free");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_close, "nng_stream_dialer_close");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_dial, "nng_stream_dialer_dial");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_set, "nng_stream_dialer_set");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_get, "nng_stream_dialer_get");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_get_bool, "nng_stream_dialer_get_bool");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_get_int, "nng_stream_dialer_get_int");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_get_ms, "nng_stream_dialer_get_ms");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_get_size, "nng_stream_dialer_get_size");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_get_uint64, "nng_stream_dialer_get_uint64");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_get_string, "nng_stream_dialer_get_string");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_get_ptr, "nng_stream_dialer_get_ptr");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_get_addr, "nng_stream_dialer_get_addr");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_set_bool, "nng_stream_dialer_set_bool");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_set_int, "nng_stream_dialer_set_int");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_set_ms, "nng_stream_dialer_set_ms");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_set_size, "nng_stream_dialer_set_size");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_set_uint64, "nng_stream_dialer_set_uint64");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_set_string, "nng_stream_dialer_set_string");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_set_ptr, "nng_stream_dialer_set_ptr");
    lib.bindSymbol(cast(void**)&nng_stream_dialer_set_addr, "nng_stream_dialer_set_addr");
    lib.bindSymbol(cast(void**)&nng_stream_listener_alloc, "nng_stream_listener_alloc");
    lib.bindSymbol(cast(void**)&nng_stream_listener_alloc_url, "nng_stream_listener_alloc_url");
    lib.bindSymbol(cast(void**)&nng_stream_listener_free, "nng_stream_listener_free");
    lib.bindSymbol(cast(void**)&nng_stream_listener_close, "nng_stream_listener_close");
    lib.bindSymbol(cast(void**)&nng_stream_listener_listen, "nng_stream_listener_listen");
    lib.bindSymbol(cast(void**)&nng_stream_listener_accept, "nng_stream_listener_accept");
    lib.bindSymbol(cast(void**)&nng_stream_listener_set, "nng_stream_listener_set");
    lib.bindSymbol(cast(void**)&nng_stream_listener_get, "nng_stream_listener_get");
    lib.bindSymbol(cast(void**)&nng_stream_listener_get_bool, "nng_stream_listener_get_bool");
    lib.bindSymbol(cast(void**)&nng_stream_listener_get_int, "nng_stream_listener_get_int");
    lib.bindSymbol(cast(void**)&nng_stream_listener_get_ms, "nng_stream_listener_get_ms");
    lib.bindSymbol(cast(void**)&nng_stream_listener_get_size, "nng_stream_listener_get_size");
    lib.bindSymbol(cast(void**)&nng_stream_listener_get_uint64, "nng_stream_listener_get_uint64");
    lib.bindSymbol(cast(void**)&nng_stream_listener_get_string, "nng_stream_listener_get_string");
    lib.bindSymbol(cast(void**)&nng_stream_listener_get_ptr, "nng_stream_listener_get_ptr");
    lib.bindSymbol(cast(void**)&nng_stream_listener_get_addr, "nng_stream_listener_get_addr");
    lib.bindSymbol(cast(void**)&nng_stream_listener_set_bool, "nng_stream_listener_set_bool");
    lib.bindSymbol(cast(void**)&nng_stream_listener_set_int, "nng_stream_listener_set_int");
    lib.bindSymbol(cast(void**)&nng_stream_listener_set_ms, "nng_stream_listener_set_ms");
    lib.bindSymbol(cast(void**)&nng_stream_listener_set_size, "nng_stream_listener_set_size");
    lib.bindSymbol(cast(void**)&nng_stream_listener_set_uint64, "nng_stream_listener_set_uint64");
    lib.bindSymbol(cast(void**)&nng_stream_listener_set_string, "nng_stream_listener_set_string");
    lib.bindSymbol(cast(void**)&nng_stream_listener_set_ptr, "nng_stream_listener_set_ptr");
    lib.bindSymbol(cast(void**)&nng_stream_listener_set_addr, "nng_stream_listener_set_addr");
    lib.bindSymbol(cast(void**)&nn_cmsg_next, "nn_cmsg_next");
    lib.bindSymbol(cast(void**)&nn_socket, "nn_socket");
    lib.bindSymbol(cast(void**)&nn_setsockopt, "nn_setsockopt");
    lib.bindSymbol(cast(void**)&nn_getsockopt, "nn_getsockopt");
    lib.bindSymbol(cast(void**)&nn_bind, "nn_bind");
    lib.bindSymbol(cast(void**)&nn_connect, "nn_connect");
    lib.bindSymbol(cast(void**)&nn_shutdown, "nn_shutdown");
    lib.bindSymbol(cast(void**)&nn_send, "nn_send");
    lib.bindSymbol(cast(void**)&nn_recv, "nn_recv");
    lib.bindSymbol(cast(void**)&nn_sendmsg, "nn_sendmsg");
    lib.bindSymbol(cast(void**)&nn_recvmsg, "nn_recvmsg");
    lib.bindSymbol(cast(void**)&nn_close, "nn_close");
    lib.bindSymbol(cast(void**)&nn_poll, "nn_poll");
    lib.bindSymbol(cast(void**)&nn_device, "nn_device");
    lib.bindSymbol(cast(void**)&nn_get_statistic, "nn_get_statistic");
    lib.bindSymbol(cast(void**)&nn_allocmsg, "nn_allocmsg");
    lib.bindSymbol(cast(void**)&nn_reallocmsg, "nn_reallocmsg");
    lib.bindSymbol(cast(void**)&nn_freemsg, "nn_freemsg");
    lib.bindSymbol(cast(void**)&nn_errno, "nn_errno");
    lib.bindSymbol(cast(void**)&nn_strerror, "nn_strerror");
    lib.bindSymbol(cast(void**)&nn_term, "nn_term");
    lib.bindSymbol(cast(void**)&nng_bus0_open, "nng_bus0_open");
    lib.bindSymbol(cast(void**)&nng_bus0_open_raw, "nng_bus0_open_raw");
    lib.bindSymbol(cast(void**)&nng_bus_open, "nng_bus_open");
    lib.bindSymbol(cast(void**)&nng_bus_open_raw, "nng_bus_open_raw");
    lib.bindSymbol(cast(void**)&nng_pair0_open, "nng_pair0_open");
    lib.bindSymbol(cast(void**)&nng_pair0_open_raw, "nng_pair0_open_raw");
    //lib.bindSymbol(cast(void**)&nng_pair_open, "nng_pair_open");
    //lib.bindSymbol(cast(void**)&nng_pair_open_raw, "nng_pair_open_raw");
    lib.bindSymbol(cast(void**)&nng_pair1_open, "nng_pair1_open");
    lib.bindSymbol(cast(void**)&nng_pair1_open_raw, "nng_pair1_open_raw");
    //lib.bindSymbol(cast(void**)&nng_pair_open, "nng_pair_open");
    //lib.bindSymbol(cast(void**)&nng_pair_open_raw, "nng_pair_open_raw");
    lib.bindSymbol(cast(void**)&nng_pull0_open, "nng_pull0_open");
    lib.bindSymbol(cast(void**)&nng_pull0_open_raw, "nng_pull0_open_raw");
    lib.bindSymbol(cast(void**)&nng_pull_open, "nng_pull_open");
    lib.bindSymbol(cast(void**)&nng_pull_open_raw, "nng_pull_open_raw");
    lib.bindSymbol(cast(void**)&nng_push0_open, "nng_push0_open");
    lib.bindSymbol(cast(void**)&nng_push0_open_raw, "nng_push0_open_raw");
    lib.bindSymbol(cast(void**)&nng_push_open, "nng_push_open");
    lib.bindSymbol(cast(void**)&nng_push_open_raw, "nng_push_open_raw");
    lib.bindSymbol(cast(void**)&nng_pub0_open, "nng_pub0_open");
    lib.bindSymbol(cast(void**)&nng_pub0_open_raw, "nng_pub0_open_raw");
    lib.bindSymbol(cast(void**)&nng_pub_open, "nng_pub_open");
    lib.bindSymbol(cast(void**)&nng_pub_open_raw, "nng_pub_open_raw");
    lib.bindSymbol(cast(void**)&nng_sub0_open, "nng_sub0_open");
    lib.bindSymbol(cast(void**)&nng_sub0_open_raw, "nng_sub0_open_raw");
    lib.bindSymbol(cast(void**)&nng_sub_open, "nng_sub_open");
    lib.bindSymbol(cast(void**)&nng_sub_open_raw, "nng_sub_open_raw");
    lib.bindSymbol(cast(void**)&nng_rep0_open, "nng_rep0_open");
    lib.bindSymbol(cast(void**)&nng_rep0_open_raw, "nng_rep0_open_raw");
    lib.bindSymbol(cast(void**)&nng_rep_open, "nng_rep_open");
    lib.bindSymbol(cast(void**)&nng_rep_open_raw, "nng_rep_open_raw");
    lib.bindSymbol(cast(void**)&nng_respondent0_open, "nng_respondent0_open");
    lib.bindSymbol(cast(void**)&nng_respondent0_open_raw, "nng_respondent0_open_raw");
    lib.bindSymbol(cast(void**)&nng_respondent_open, "nng_respondent_open");
    lib.bindSymbol(cast(void**)&nng_respondent_open_raw, "nng_respondent_open_raw");
    lib.bindSymbol(cast(void**)&nng_surveyor0_open, "nng_surveyor0_open");
    lib.bindSymbol(cast(void**)&nng_surveyor0_open_raw, "nng_surveyor0_open_raw");
    lib.bindSymbol(cast(void**)&nng_surveyor_open, "nng_surveyor_open");
    lib.bindSymbol(cast(void**)&nng_surveyor_open_raw, "nng_surveyor_open_raw");
    lib.bindSymbol(cast(void**)&nng_http_req_alloc, "nng_http_req_alloc");
    lib.bindSymbol(cast(void**)&nng_http_req_free, "nng_http_req_free");
    lib.bindSymbol(cast(void**)&nng_http_req_get_method, "nng_http_req_get_method");
    lib.bindSymbol(cast(void**)&nng_http_req_get_version, "nng_http_req_get_version");
    lib.bindSymbol(cast(void**)&nng_http_req_get_uri, "nng_http_req_get_uri");
    lib.bindSymbol(cast(void**)&nng_http_req_set_header, "nng_http_req_set_header");
    lib.bindSymbol(cast(void**)&nng_http_req_add_header, "nng_http_req_add_header");
    lib.bindSymbol(cast(void**)&nng_http_req_del_header, "nng_http_req_del_header");
    lib.bindSymbol(cast(void**)&nng_http_req_get_header, "nng_http_req_get_header");
    lib.bindSymbol(cast(void**)&nng_http_req_set_method, "nng_http_req_set_method");
    lib.bindSymbol(cast(void**)&nng_http_req_set_version, "nng_http_req_set_version");
    lib.bindSymbol(cast(void**)&nng_http_req_set_uri, "nng_http_req_set_uri");
    lib.bindSymbol(cast(void**)&nng_http_req_set_data, "nng_http_req_set_data");
    lib.bindSymbol(cast(void**)&nng_http_req_copy_data, "nng_http_req_copy_data");
    lib.bindSymbol(cast(void**)&nng_http_req_get_data, "nng_http_req_get_data");
    lib.bindSymbol(cast(void**)&nng_http_res_alloc, "nng_http_res_alloc");
    lib.bindSymbol(cast(void**)&nng_http_res_alloc_error, "nng_http_res_alloc_error");
    lib.bindSymbol(cast(void**)&nng_http_res_free, "nng_http_res_free");
    lib.bindSymbol(cast(void**)&nng_http_res_get_status, "nng_http_res_get_status");
    lib.bindSymbol(cast(void**)&nng_http_res_set_status, "nng_http_res_set_status");
    lib.bindSymbol(cast(void**)&nng_http_res_get_reason, "nng_http_res_get_reason");
    lib.bindSymbol(cast(void**)&nng_http_res_set_reason, "nng_http_res_set_reason");
    lib.bindSymbol(cast(void**)&nng_http_res_set_header, "nng_http_res_set_header");
    lib.bindSymbol(cast(void**)&nng_http_res_add_header, "nng_http_res_add_header");
    lib.bindSymbol(cast(void**)&nng_http_res_del_header, "nng_http_res_del_header");
    lib.bindSymbol(cast(void**)&nng_http_res_get_header, "nng_http_res_get_header");
    lib.bindSymbol(cast(void**)&nng_http_res_set_version, "nng_http_res_set_version");
    lib.bindSymbol(cast(void**)&nng_http_res_get_version, "nng_http_res_get_version");
    lib.bindSymbol(cast(void**)&nng_http_res_get_data, "nng_http_res_get_data");
    lib.bindSymbol(cast(void**)&nng_http_res_set_data, "nng_http_res_set_data");
    lib.bindSymbol(cast(void**)&nng_http_res_copy_data, "nng_http_res_copy_data");
    lib.bindSymbol(cast(void**)&nng_http_conn_close, "nng_http_conn_close");
    lib.bindSymbol(cast(void**)&nng_http_conn_read, "nng_http_conn_read");
    lib.bindSymbol(cast(void**)&nng_http_conn_read_all, "nng_http_conn_read_all");
    lib.bindSymbol(cast(void**)&nng_http_conn_write, "nng_http_conn_write");
    lib.bindSymbol(cast(void**)&nng_http_conn_write_all, "nng_http_conn_write_all");
    lib.bindSymbol(cast(void**)&nng_http_conn_write_req, "nng_http_conn_write_req");
    lib.bindSymbol(cast(void**)&nng_http_conn_write_res, "nng_http_conn_write_res");
    lib.bindSymbol(cast(void**)&nng_http_conn_read_req, "nng_http_conn_read_req");
    lib.bindSymbol(cast(void**)&nng_http_conn_read_res, "nng_http_conn_read_res");
    lib.bindSymbol(cast(void**)&nng_http_req_reset, "nng_http_req_reset");
    lib.bindSymbol(cast(void**)&nng_http_res_reset, "nng_http_res_reset");
    lib.bindSymbol(cast(void**)&nng_http_handler_alloc, "nng_http_handler_alloc");
    lib.bindSymbol(cast(void**)&nng_http_handler_free, "nng_http_handler_free");
    lib.bindSymbol(cast(void**)&nng_http_handler_alloc_file, "nng_http_handler_alloc_file");
    lib.bindSymbol(cast(void**)&nng_http_handler_alloc_static, "nng_http_handler_alloc_static");
    lib.bindSymbol(cast(void**)&nng_http_handler_alloc_redirect, "nng_http_handler_alloc_redirect");
    lib.bindSymbol(cast(void**)&nng_http_handler_alloc_directory, "nng_http_handler_alloc_directory");
    lib.bindSymbol(cast(void**)&nng_http_handler_set_method, "nng_http_handler_set_method");
    lib.bindSymbol(cast(void**)&nng_http_handler_set_host, "nng_http_handler_set_host");
    lib.bindSymbol(cast(void**)&nng_http_handler_collect_body, "nng_http_handler_collect_body");
    lib.bindSymbol(cast(void**)&nng_http_handler_set_tree, "nng_http_handler_set_tree");
    lib.bindSymbol(cast(void**)&nng_http_handler_set_data, "nng_http_handler_set_data");
    lib.bindSymbol(cast(void**)&nng_http_handler_get_data, "nng_http_handler_get_data");
    lib.bindSymbol(cast(void**)&nng_http_server_hold, "nng_http_server_hold");
    lib.bindSymbol(cast(void**)&nng_http_server_release, "nng_http_server_release");
    lib.bindSymbol(cast(void**)&nng_http_server_start, "nng_http_server_start");
    lib.bindSymbol(cast(void**)&nng_http_server_stop, "nng_http_server_stop");
    lib.bindSymbol(cast(void**)&nng_http_server_add_handler, "nng_http_server_add_handler");
    lib.bindSymbol(cast(void**)&nng_http_server_del_handler, "nng_http_server_del_handler");
    lib.bindSymbol(cast(void**)&nng_http_server_set_tls, "nng_http_server_set_tls");
    lib.bindSymbol(cast(void**)&nng_http_server_get_tls, "nng_http_server_get_tls");
    lib.bindSymbol(cast(void**)&nng_http_server_get_addr, "nng_http_server_get_addr");
    lib.bindSymbol(cast(void**)&nng_http_server_set_error_page, "nng_http_server_set_error_page");
    lib.bindSymbol(cast(void**)&nng_http_server_set_error_file, "nng_http_server_set_error_file");
    lib.bindSymbol(cast(void**)&nng_http_server_res_error, "nng_http_server_res_error");
    lib.bindSymbol(cast(void**)&nng_http_hijack, "nng_http_hijack");
    lib.bindSymbol(cast(void**)&nng_http_client_alloc, "nng_http_client_alloc");
    lib.bindSymbol(cast(void**)&nng_http_client_free, "nng_http_client_free");
    lib.bindSymbol(cast(void**)&nng_http_client_set_tls, "nng_http_client_set_tls");
    lib.bindSymbol(cast(void**)&nng_http_client_get_tls, "nng_http_client_get_tls");
    lib.bindSymbol(cast(void**)&nng_http_client_connect, "nng_http_client_connect");
    lib.bindSymbol(cast(void**)&nng_http_conn_transact, "nng_http_conn_transact");
    lib.bindSymbol(cast(void**)&nng_http_client_transact, "nng_http_client_transact");
    lib.bindSymbol(cast(void**)&nng_tls_config_alloc, "nng_tls_config_alloc");
    lib.bindSymbol(cast(void**)&nng_tls_config_hold, "nng_tls_config_hold");
    lib.bindSymbol(cast(void**)&nng_tls_config_free, "nng_tls_config_free");
    lib.bindSymbol(cast(void**)&nng_tls_config_server_name, "nng_tls_config_server_name");
    lib.bindSymbol(cast(void**)&nng_tls_config_ca_chain, "nng_tls_config_ca_chain");
    lib.bindSymbol(cast(void**)&nng_tls_config_own_cert, "nng_tls_config_own_cert");
    lib.bindSymbol(cast(void**)&nng_tls_config_key, "nng_tls_config_key");
    lib.bindSymbol(cast(void**)&nng_tls_config_pass, "nng_tls_config_pass");
    lib.bindSymbol(cast(void**)&nng_tls_config_auth_mode, "nng_tls_config_auth_mode");
    lib.bindSymbol(cast(void**)&nng_tls_config_ca_file, "nng_tls_config_ca_file");
    lib.bindSymbol(cast(void**)&nng_tls_config_cert_key_file, "nng_tls_config_cert_key_file");
    lib.bindSymbol(cast(void**)&nng_opts_parse, "nng_opts_parse");
    lib.bindSymbol(cast(void**)&nng_clock, "nng_clock");
    lib.bindSymbol(cast(void**)&nng_msleep, "nng_msleep");
    lib.bindSymbol(cast(void**)&nng_thread_create, "nng_thread_create");
    lib.bindSymbol(cast(void**)&nng_thread_destroy, "nng_thread_destroy");
    lib.bindSymbol(cast(void**)&nng_mtx_alloc, "nng_mtx_alloc");
    lib.bindSymbol(cast(void**)&nng_mtx_free, "nng_mtx_free");
    lib.bindSymbol(cast(void**)&nng_mtx_lock, "nng_mtx_lock");
    lib.bindSymbol(cast(void**)&nng_mtx_unlock, "nng_mtx_unlock");
    lib.bindSymbol(cast(void**)&nng_cv_alloc, "nng_cv_alloc");
    lib.bindSymbol(cast(void**)&nng_cv_free, "nng_cv_free");
    lib.bindSymbol(cast(void**)&nng_cv_wait, "nng_cv_wait");
    lib.bindSymbol(cast(void**)&nng_cv_until, "nng_cv_until");
    lib.bindSymbol(cast(void**)&nng_cv_wake, "nng_cv_wake");
    lib.bindSymbol(cast(void**)&nng_cv_wake1, "nng_cv_wake1");
    lib.bindSymbol(cast(void**)&nng_random, "nng_random");
    lib.bindSymbol(cast(void**)&nng_inproc_register, "nng_inproc_register");
    lib.bindSymbol(cast(void**)&nng_ipc_register, "nng_ipc_register");
    lib.bindSymbol(cast(void**)&nng_tcp_register, "nng_tcp_register");
    lib.bindSymbol(cast(void**)&nng_tls_register, "nng_tls_register");
    lib.bindSymbol(cast(void**)&nng_ws_register, "nng_ws_register");
    lib.bindSymbol(cast(void**)&nng_wss_register, "nng_wss_register");
    lib.bindSymbol(cast(void**)&nng_zt_register, "nng_zt_register");


    if(errorCount() != errCount) loadedVersion = NNGSupport.badLibrary;
    else loadedVersion = NNGSupport.nng;

    return loadedVersion;
}